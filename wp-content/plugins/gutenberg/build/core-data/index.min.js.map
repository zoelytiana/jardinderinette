{"version":3,"file":"./build/core-data/index.min.js","mappings":"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","sources":["webpack://wp/./node_modules/equivalent-key-map/equivalent-key-map.js","webpack://wp/./node_modules/memize/index.js","webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/compat get default export","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"data\"]","webpack://wp/external window \"lodash\"","webpack://wp/external window [\"wp\",\"isShallowEqual\"]","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/if-matching-action.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/replace-action.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/conservative-map-item.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/on-sub-key.js","webpack://wp/external window [\"wp\",\"apiFetch\"]","webpack://wp/external window [\"wp\",\"i18n\"]","webpack://wp/./node_modules/uuid/dist/esm-browser/rng.js","webpack://wp/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://wp/./node_modules/uuid/dist/esm-browser/regex.js","webpack://wp/./node_modules/uuid/dist/esm-browser/validate.js","webpack://wp/./node_modules/uuid/dist/esm-browser/v4.js","webpack://wp/external window [\"wp\",\"url\"]","webpack://wp/external window [\"wp\",\"deprecated\"]","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/actions.js","webpack://wp/./packages/core-data/build-module/batch/@wordpress/core-data/src/batch/default-processor.js","webpack://wp/./packages/core-data/build-module/batch/@wordpress/core-data/src/batch/create-batch.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/name.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/actions.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/entities.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/get-normalized-comma-separable.js","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/get-query-parts.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/with-weak-map-cache.js","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/reducer.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/reducer.js","webpack://wp/./node_modules/rememo/es/rememo.js","webpack://wp/./packages/core-data/build-module/queried-data/@wordpress/core-data/src/queried-data/selectors.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/selectors.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/is-raw-attribute.js","webpack://wp/./packages/core-data/build-module/utils/@wordpress/core-data/src/utils/forward-resolver.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/resolvers.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/utils.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/reducer.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/selectors.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/engine.js","webpack://wp/external window [\"wp\",\"element\"]","webpack://wp/external window [\"wp\",\"blocks\"]","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/entity-provider.js","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/memoize.js","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/constants.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-query-select.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-entity-record.ts","webpack://wp/./packages/core-data/build-module/hooks/@wordpress/core-data/src/hooks/use-entity-records.ts","webpack://wp/external window [\"wp\",\"htmlEntities\"]","webpack://wp/./packages/core-data/build-module/fetch/@wordpress/core-data/src/fetch/__experimental-fetch-link-suggestions.js","webpack://wp/./packages/core-data/build-module/fetch/@wordpress/core-data/src/fetch/__experimental-fetch-url-data.js","webpack://wp/./packages/core-data/build-module/@wordpress/core-data/src/index.js","webpack://wp/./packages/core-data/build-module/locks/@wordpress/core-data/src/locks/actions.js"],"sourcesContent":["'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * Given an instance of EquivalentKeyMap, returns its internal value pair tuple\n * for a key, if one exists. The tuple members consist of the last reference\n * value for the key (used in efficient subsequent lookups) and the value\n * assigned for the key at the leaf node.\n *\n * @param {EquivalentKeyMap} instance EquivalentKeyMap instance.\n * @param {*} key                     The key for which to return value pair.\n *\n * @return {?Array} Value pair, if exists.\n */\nfunction getValuePair(instance, key) {\n  var _map = instance._map,\n      _arrayTreeMap = instance._arrayTreeMap,\n      _objectTreeMap = instance._objectTreeMap; // Map keeps a reference to the last object-like key used to set the\n  // value, which can be used to shortcut immediately to the value.\n\n  if (_map.has(key)) {\n    return _map.get(key);\n  } // Sort keys to ensure stable retrieval from tree.\n\n\n  var properties = Object.keys(key).sort(); // Tree by type to avoid conflicts on numeric object keys, empty value.\n\n  var map = Array.isArray(key) ? _arrayTreeMap : _objectTreeMap;\n\n  for (var i = 0; i < properties.length; i++) {\n    var property = properties[i];\n    map = map.get(property);\n\n    if (map === undefined) {\n      return;\n    }\n\n    var propertyValue = key[property];\n    map = map.get(propertyValue);\n\n    if (map === undefined) {\n      return;\n    }\n  }\n\n  var valuePair = map.get('_ekm_value');\n\n  if (!valuePair) {\n    return;\n  } // If reached, it implies that an object-like key was set with another\n  // reference, so delete the reference and replace with the current.\n\n\n  _map.delete(valuePair[0]);\n\n  valuePair[0] = key;\n  map.set('_ekm_value', valuePair);\n\n  _map.set(key, valuePair);\n\n  return valuePair;\n}\n/**\n * Variant of a Map object which enables lookup by equivalent (deeply equal)\n * object and array keys.\n */\n\n\nvar EquivalentKeyMap =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructs a new instance of EquivalentKeyMap.\n   *\n   * @param {Iterable.<*>} iterable Initial pair of key, value for map.\n   */\n  function EquivalentKeyMap(iterable) {\n    _classCallCheck(this, EquivalentKeyMap);\n\n    this.clear();\n\n    if (iterable instanceof EquivalentKeyMap) {\n      // Map#forEach is only means of iterating with support for IE11.\n      var iterablePairs = [];\n      iterable.forEach(function (value, key) {\n        iterablePairs.push([key, value]);\n      });\n      iterable = iterablePairs;\n    }\n\n    if (iterable != null) {\n      for (var i = 0; i < iterable.length; i++) {\n        this.set(iterable[i][0], iterable[i][1]);\n      }\n    }\n  }\n  /**\n   * Accessor property returning the number of elements.\n   *\n   * @return {number} Number of elements.\n   */\n\n\n  _createClass(EquivalentKeyMap, [{\n    key: \"set\",\n\n    /**\n     * Add or update an element with a specified key and value.\n     *\n     * @param {*} key   The key of the element to add.\n     * @param {*} value The value of the element to add.\n     *\n     * @return {EquivalentKeyMap} Map instance.\n     */\n    value: function set(key, value) {\n      // Shortcut non-object-like to set on internal Map.\n      if (key === null || _typeof(key) !== 'object') {\n        this._map.set(key, value);\n\n        return this;\n      } // Sort keys to ensure stable assignment into tree.\n\n\n      var properties = Object.keys(key).sort();\n      var valuePair = [key, value]; // Tree by type to avoid conflicts on numeric object keys, empty value.\n\n      var map = Array.isArray(key) ? this._arrayTreeMap : this._objectTreeMap;\n\n      for (var i = 0; i < properties.length; i++) {\n        var property = properties[i];\n\n        if (!map.has(property)) {\n          map.set(property, new EquivalentKeyMap());\n        }\n\n        map = map.get(property);\n        var propertyValue = key[property];\n\n        if (!map.has(propertyValue)) {\n          map.set(propertyValue, new EquivalentKeyMap());\n        }\n\n        map = map.get(propertyValue);\n      } // If an _ekm_value exists, there was already an equivalent key. Before\n      // overriding, ensure that the old key reference is removed from map to\n      // avoid memory leak of accumulating equivalent keys. This is, in a\n      // sense, a poor man's WeakMap, while still enabling iterability.\n\n\n      var previousValuePair = map.get('_ekm_value');\n\n      if (previousValuePair) {\n        this._map.delete(previousValuePair[0]);\n      }\n\n      map.set('_ekm_value', valuePair);\n\n      this._map.set(key, valuePair);\n\n      return this;\n    }\n    /**\n     * Returns a specified element.\n     *\n     * @param {*} key The key of the element to return.\n     *\n     * @return {?*} The element associated with the specified key or undefined\n     *              if the key can't be found.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      // Shortcut non-object-like to get from internal Map.\n      if (key === null || _typeof(key) !== 'object') {\n        return this._map.get(key);\n      }\n\n      var valuePair = getValuePair(this, key);\n\n      if (valuePair) {\n        return valuePair[1];\n      }\n    }\n    /**\n     * Returns a boolean indicating whether an element with the specified key\n     * exists or not.\n     *\n     * @param {*} key The key of the element to test for presence.\n     *\n     * @return {boolean} Whether an element with the specified key exists.\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      if (key === null || _typeof(key) !== 'object') {\n        return this._map.has(key);\n      } // Test on the _presence_ of the pair, not its value, as even undefined\n      // can be a valid member value for a key.\n\n\n      return getValuePair(this, key) !== undefined;\n    }\n    /**\n     * Removes the specified element.\n     *\n     * @param {*} key The key of the element to remove.\n     *\n     * @return {boolean} Returns true if an element existed and has been\n     *                   removed, or false if the element does not exist.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      if (!this.has(key)) {\n        return false;\n      } // This naive implementation will leave orphaned child trees. A better\n      // implementation should traverse and remove orphans.\n\n\n      this.set(key, undefined);\n      return true;\n    }\n    /**\n     * Executes a provided function once per each key/value pair, in insertion\n     * order.\n     *\n     * @param {Function} callback Function to execute for each element.\n     * @param {*}        thisArg  Value to use as `this` when executing\n     *                            `callback`.\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      var _this = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n\n      this._map.forEach(function (value, key) {\n        // Unwrap value from object-like value pair.\n        if (key !== null && _typeof(key) === 'object') {\n          value = value[1];\n        }\n\n        callback.call(thisArg, value, key, _this);\n      });\n    }\n    /**\n     * Removes all elements.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._map = new Map();\n      this._arrayTreeMap = new Map();\n      this._objectTreeMap = new Map();\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._map.size;\n    }\n  }]);\n\n  return EquivalentKeyMap;\n}();\n\nmodule.exports = EquivalentKeyMap;\n","/**\n * Memize options object.\n *\n * @typedef MemizeOptions\n *\n * @property {number} [maxSize] Maximum size of the cache.\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef MemizeCacheNode\n *\n * @property {?MemizeCacheNode|undefined} [prev] Previous node.\n * @property {?MemizeCacheNode|undefined} [next] Next node.\n * @property {Array<*>}                   args   Function arguments for cache\n *                                               entry.\n * @property {*}                          val    Function result.\n */\n\n/**\n * Properties of the enhanced function for controlling cache.\n *\n * @typedef MemizeMemoizedFunction\n *\n * @property {()=>void} clear Clear the cache.\n */\n\n/**\n * Accepts a function to be memoized, and returns a new memoized function, with\n * optional options.\n *\n * @template {Function} F\n *\n * @param {F}             fn        Function to memoize.\n * @param {MemizeOptions} [options] Options object.\n *\n * @return {F & MemizeMemoizedFunction} Memoized function.\n */\nfunction memize( fn, options ) {\n\tvar size = 0;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar head;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar tail;\n\n\toptions = options || {};\n\n\tfunction memoized( /* ...args */ ) {\n\t\tvar node = head,\n\t\t\tlen = arguments.length,\n\t\t\targs, i;\n\n\t\tsearchCache: while ( node ) {\n\t\t\t// Perform a shallow equality test to confirm that whether the node\n\t\t\t// under test is a candidate for the arguments passed. Two arrays\n\t\t\t// are shallowly equal if their length matches and each entry is\n\t\t\t// strictly equal between the two sets. Avoid abstracting to a\n\t\t\t// function which could incur an arguments leaking deoptimization.\n\n\t\t\t// Check whether node arguments match arguments length\n\t\t\tif ( node.args.length !== arguments.length ) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check whether node arguments match arguments values\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( node.args[ i ] !== arguments[ i ] ) {\n\t\t\t\t\tnode = node.next;\n\t\t\t\t\tcontinue searchCache;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif ( node !== head ) {\n\t\t\t\t// As tail, shift to previous. Must only shift if not also\n\t\t\t\t// head, since if both head and tail, there is no previous.\n\t\t\t\tif ( node === tail ) {\n\t\t\t\t\ttail = node.prev;\n\t\t\t\t}\n\n\t\t\t\t// Adjust siblings to point to each other. If node was tail,\n\t\t\t\t// this also handles new tail's empty `next` assignment.\n\t\t\t\t/** @type {MemizeCacheNode} */ ( node.prev ).next = node.next;\n\t\t\t\tif ( node.next ) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {MemizeCacheNode} */ ( head ).prev = node;\n\t\t\t\thead = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\t// Create a copy of arguments (avoid leaking deoptimization)\n\t\targs = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tnode = {\n\t\t\targs: args,\n\n\t\t\t// Generate the result from original function\n\t\t\tval: fn.apply( null, args ),\n\t\t};\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif ( head ) {\n\t\t\thead.prev = node;\n\t\t\tnode.next = head;\n\t\t} else {\n\t\t\t// If no head, follows that there's no tail (at initial or reset)\n\t\t\ttail = node;\n\t\t}\n\n\t\t// Trim tail if we're reached max size and are pending cache insertion\n\t\tif ( size === /** @type {MemizeOptions} */ ( options ).maxSize ) {\n\t\t\ttail = /** @type {MemizeCacheNode} */ ( tail ).prev;\n\t\t\t/** @type {MemizeCacheNode} */ ( tail ).next = null;\n\t\t} else {\n\t\t\tsize++;\n\t\t}\n\n\t\thead = node;\n\n\t\treturn node.val;\n\t}\n\n\tmemoized.clear = function() {\n\t\thead = null;\n\t\ttail = null;\n\t\tsize = 0;\n\t};\n\n\tif ( process.env.NODE_ENV === 'test' ) {\n\t\t// Cache is not exposed in the public API, but used in tests to ensure\n\t\t// expected list progression\n\t\tmemoized.getCache = function() {\n\t\t\treturn [ head, tail, size ];\n\t\t};\n\t}\n\n\t// Ignore reason: There's not a clear solution to create an intersection of\n\t// the function with additional properties, where the goal is to retain the\n\t// function signature of the incoming argument and add control properties\n\t// on the return value.\n\n\t// @ts-ignore\n\treturn memoized;\n}\n\nmodule.exports = memize;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"lodash\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"isShallowEqual\"];","/**\n * A higher-order reducer creator which invokes the original reducer only if\n * the dispatching action matches the given predicate, **OR** if state is\n * initializing (undefined).\n *\n * @param {Function} isMatch Function predicate for allowing reducer call.\n *\n * @return {Function} Higher-order reducer.\n */\nconst ifMatchingAction = ( isMatch ) => ( reducer ) => ( state, action ) => {\n\tif ( state === undefined || isMatch( action ) ) {\n\t\treturn reducer( state, action );\n\t}\n\n\treturn state;\n};\n\nexport default ifMatchingAction;\n","/**\n * Higher-order reducer creator which substitutes the action object before\n * passing to the original reducer.\n *\n * @param {Function} replacer Function mapping original action to replacement.\n *\n * @return {Function} Higher-order reducer.\n */\nconst replaceAction = ( replacer ) => ( reducer ) => ( state, action ) => {\n\treturn reducer( state, replacer( action ) );\n};\n\nexport default replaceAction;\n","/**\n * External dependencies\n */\nimport { isEqual } from 'lodash';\n\n/**\n * Given the current and next item entity, returns the minimally \"modified\"\n * result of the next item, preferring value references from the original item\n * if equal. If all values match, the original item is returned.\n *\n * @param {Object} item     Original item.\n * @param {Object} nextItem Next item.\n *\n * @return {Object} Minimally modified merged item.\n */\nexport default function conservativeMapItem( item, nextItem ) {\n\t// Return next item in its entirety if there is no original item.\n\tif ( ! item ) {\n\t\treturn nextItem;\n\t}\n\n\tlet hasChanges = false;\n\tconst result = {};\n\tfor ( const key in nextItem ) {\n\t\tif ( isEqual( item[ key ], nextItem[ key ] ) ) {\n\t\t\tresult[ key ] = item[ key ];\n\t\t} else {\n\t\t\thasChanges = true;\n\t\t\tresult[ key ] = nextItem[ key ];\n\t\t}\n\t}\n\n\tif ( ! hasChanges ) {\n\t\treturn item;\n\t}\n\n\t// Only at this point, backfill properties from the original item which\n\t// weren't explicitly set into the result above. This is an optimization\n\t// to allow `hasChanges` to return early.\n\tfor ( const key in item ) {\n\t\tif ( ! result.hasOwnProperty( key ) ) {\n\t\t\tresult[ key ] = item[ key ];\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * Higher-order reducer creator which creates a combined reducer object, keyed\n * by a property on the action object.\n *\n * @param {string} actionProperty Action property by which to key object.\n *\n * @return {Function} Higher-order reducer.\n */\nexport const onSubKey = ( actionProperty ) => ( reducer ) => (\n\tstate = {},\n\taction\n) => {\n\t// Retrieve subkey from action. Do not track if undefined; useful for cases\n\t// where reducer is scoped by action shape.\n\tconst key = action[ actionProperty ];\n\tif ( key === undefined ) {\n\t\treturn state;\n\t}\n\n\t// Avoid updating state if unchanged. Note that this also accounts for a\n\t// reducer which returns undefined on a key which is not yet tracked.\n\tconst nextKeyState = reducer( state[ key ], action );\n\tif ( nextKeyState === state[ key ] ) {\n\t\treturn state;\n\t}\n\n\treturn {\n\t\t...state,\n\t\t[ key ]: nextKeyState,\n\t};\n};\n\nexport default onSubKey;\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"apiFetch\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"url\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"deprecated\"];","/**\n * External dependencies\n */\nimport { castArray } from 'lodash';\n\n/**\n * Returns an action object used in signalling that items have been received.\n *\n * @param {Array}   items Items received.\n * @param {?Object} edits Optional edits to reset.\n *\n * @return {Object} Action object.\n */\nexport function receiveItems( items, edits ) {\n\treturn {\n\t\ttype: 'RECEIVE_ITEMS',\n\t\titems: castArray( items ),\n\t\tpersistedEdits: edits,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that entity records have been\n * deleted and they need to be removed from entities state.\n *\n * @param {string}       kind            Kind of the removed entities.\n * @param {string}       name            Name of the removed entities.\n * @param {Array|number} records         Record IDs of the removed entities.\n * @param {boolean}      invalidateCache Controls whether we want to invalidate the cache.\n * @return {Object} Action object.\n */\nexport function removeItems( kind, name, records, invalidateCache = false ) {\n\treturn {\n\t\ttype: 'REMOVE_ITEMS',\n\t\titemIds: castArray( records ),\n\t\tkind,\n\t\tname,\n\t\tinvalidateCache,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that queried data has been\n * received.\n *\n * @param {Array}   items Queried items received.\n * @param {?Object} query Optional query object.\n * @param {?Object} edits Optional edits to reset.\n *\n * @return {Object} Action object.\n */\nexport function receiveQueriedItems( items, query = {}, edits ) {\n\treturn {\n\t\t...receiveItems( items, edits ),\n\t\tquery,\n\t};\n}\n","/**\n * External dependencies\n */\nimport { chunk } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Maximum number of requests to place in a single batch request. Obtained by\n * sending a preflight OPTIONS request to /batch/v1/.\n *\n * @type {number?}\n */\nlet maxItems = null;\n\n/**\n * Default batch processor. Sends its input requests to /batch/v1.\n *\n * @param {Array} requests List of API requests to perform at once.\n *\n * @return {Promise} Promise that resolves to a list of objects containing\n *                   either `output` (if that request was succesful) or `error`\n *                   (if not ).\n */\nexport default async function defaultProcessor( requests ) {\n\tif ( maxItems === null ) {\n\t\tconst preflightResponse = await apiFetch( {\n\t\t\tpath: '/batch/v1',\n\t\t\tmethod: 'OPTIONS',\n\t\t} );\n\t\tmaxItems = preflightResponse.endpoints[ 0 ].args.requests.maxItems;\n\t}\n\n\tconst results = [];\n\n\tfor ( const batchRequests of chunk( requests, maxItems ) ) {\n\t\tconst batchResponse = await apiFetch( {\n\t\t\tpath: '/batch/v1',\n\t\t\tmethod: 'POST',\n\t\t\tdata: {\n\t\t\t\tvalidation: 'require-all-validate',\n\t\t\t\trequests: batchRequests.map( ( request ) => ( {\n\t\t\t\t\tpath: request.path,\n\t\t\t\t\tbody: request.data, // Rename 'data' to 'body'.\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\theaders: request.headers,\n\t\t\t\t} ) ),\n\t\t\t},\n\t\t} );\n\n\t\tlet batchResults;\n\n\t\tif ( batchResponse.failed ) {\n\t\t\tbatchResults = batchResponse.responses.map( ( response ) => ( {\n\t\t\t\terror: response?.body,\n\t\t\t} ) );\n\t\t} else {\n\t\t\tbatchResults = batchResponse.responses.map( ( response ) => {\n\t\t\t\tconst result = {};\n\t\t\t\tif ( response.status >= 200 && response.status < 300 ) {\n\t\t\t\t\tresult.output = response.body;\n\t\t\t\t} else {\n\t\t\t\t\tresult.error = response.body;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} );\n\t\t}\n\n\t\tresults.push( ...batchResults );\n\t}\n\n\treturn results;\n}\n","/**\n * External dependencies\n */\nimport { isFunction, zip } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport defaultProcessor from './default-processor';\n\n/**\n * Creates a batch, which can be used to combine multiple API requests into one\n * API request using the WordPress batch processing API (/v1/batch).\n *\n * ```\n * const batch = createBatch();\n * const dunePromise = batch.add( {\n *   path: '/v1/books',\n *   method: 'POST',\n *   data: { title: 'Dune' }\n * } );\n * const lotrPromise = batch.add( {\n *   path: '/v1/books',\n *   method: 'POST',\n *   data: { title: 'Lord of the Rings' }\n * } );\n * const isSuccess = await batch.run(); // Sends one POST to /v1/batch.\n * if ( isSuccess ) {\n *   console.log(\n *     'Saved two books:',\n *     await dunePromise,\n *     await lotrPromise\n *   );\n * }\n * ```\n *\n * @param {Function} [processor] Processor function. Can be used to replace the\n *                               default functionality which is to send an API\n *                               request to /v1/batch. Is given an array of\n *                               inputs and must return a promise that\n *                               resolves to an array of objects containing\n *                               either `output` or `error`.\n */\nexport default function createBatch( processor = defaultProcessor ) {\n\tlet lastId = 0;\n\t/** @type {Array<{ input: any; resolve: ( value: any ) => void; reject: ( error: any ) => void }>} */\n\tlet queue = [];\n\tconst pending = new ObservableSet();\n\n\treturn {\n\t\t/**\n\t\t * Adds an input to the batch and returns a promise that is resolved or\n\t\t * rejected when the input is processed by `batch.run()`.\n\t\t *\n\t\t * You may also pass a thunk which allows inputs to be added\n\t\t * asychronously.\n\t\t *\n\t\t * ```\n\t\t * // Both are allowed:\n\t\t * batch.add( { path: '/v1/books', ... } );\n\t\t * batch.add( ( add ) => add( { path: '/v1/books', ... } ) );\n\t\t * ```\n\t\t *\n\t\t * If a thunk is passed, `batch.run()` will pause until either:\n\t\t *\n\t\t * - The thunk calls its `add` argument, or;\n\t\t * - The thunk returns a promise and that promise resolves, or;\n\t\t * - The thunk returns a non-promise.\n\t\t *\n\t\t * @param {any|Function} inputOrThunk Input to add or thunk to execute.\n\t\t *\n\t\t * @return {Promise|any} If given an input, returns a promise that\n\t\t *                       is resolved or rejected when the batch is\n\t\t *                       processed. If given a thunk, returns the return\n\t\t *                       value of that thunk.\n\t\t */\n\t\tadd( inputOrThunk ) {\n\t\t\tconst id = ++lastId;\n\t\t\tpending.add( id );\n\n\t\t\tconst add = ( input ) =>\n\t\t\t\tnew Promise( ( resolve, reject ) => {\n\t\t\t\t\tqueue.push( {\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tresolve,\n\t\t\t\t\t\treject,\n\t\t\t\t\t} );\n\t\t\t\t\tpending.delete( id );\n\t\t\t\t} );\n\n\t\t\tif ( isFunction( inputOrThunk ) ) {\n\t\t\t\treturn Promise.resolve( inputOrThunk( add ) ).finally( () => {\n\t\t\t\t\tpending.delete( id );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn add( inputOrThunk );\n\t\t},\n\n\t\t/**\n\t\t * Runs the batch. This calls `batchProcessor` and resolves or rejects\n\t\t * all promises returned by `add()`.\n\t\t *\n\t\t * @return {Promise<boolean>} A promise that resolves to a boolean that is true\n\t\t *                   if the processor returned no errors.\n\t\t */\n\t\tasync run() {\n\t\t\tif ( pending.size ) {\n\t\t\t\tawait new Promise( ( resolve ) => {\n\t\t\t\t\tconst unsubscribe = pending.subscribe( () => {\n\t\t\t\t\t\tif ( ! pending.size ) {\n\t\t\t\t\t\t\tunsubscribe();\n\t\t\t\t\t\t\tresolve( undefined );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tlet results;\n\n\t\t\ttry {\n\t\t\t\tresults = await processor(\n\t\t\t\t\tqueue.map( ( { input } ) => input )\n\t\t\t\t);\n\n\t\t\t\tif ( results.length !== queue.length ) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'run: Array returned by processor must be same size as input array.'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} catch ( error ) {\n\t\t\t\tfor ( const { reject } of queue ) {\n\t\t\t\t\treject( error );\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tlet isSuccess = true;\n\n\t\t\tfor ( const pair of zip( results, queue ) ) {\n\t\t\t\t/** @type {{error?: unknown, output?: unknown}} */\n\t\t\t\tconst result = pair[ 0 ];\n\n\t\t\t\t/** @type {{resolve: (value: any) => void; reject: (error: any) => void} | undefined} */\n\t\t\t\tconst queueItem = pair[ 1 ];\n\n\t\t\t\tif ( result?.error ) {\n\t\t\t\t\tqueueItem?.reject( result.error );\n\t\t\t\t\tisSuccess = false;\n\t\t\t\t} else {\n\t\t\t\t\tqueueItem?.resolve( result?.output ?? result );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tqueue = [];\n\n\t\t\treturn isSuccess;\n\t\t},\n\t};\n}\n\nclass ObservableSet {\n\tconstructor( ...args ) {\n\t\tthis.set = new Set( ...args );\n\t\tthis.subscribers = new Set();\n\t}\n\n\tget size() {\n\t\treturn this.set.size;\n\t}\n\n\tadd( value ) {\n\t\tthis.set.add( value );\n\t\tthis.subscribers.forEach( ( subscriber ) => subscriber() );\n\t\treturn this;\n\t}\n\n\tdelete( value ) {\n\t\tconst isSuccess = this.set.delete( value );\n\t\tthis.subscribers.forEach( ( subscriber ) => subscriber() );\n\t\treturn isSuccess;\n\t}\n\n\tsubscribe( subscriber ) {\n\t\tthis.subscribers.add( subscriber );\n\t\treturn () => {\n\t\t\tthis.subscribers.delete( subscriber );\n\t\t};\n\t}\n}\n","/**\n * The reducer key used by core data in store registration.\n * This is defined in a separate file to avoid cycle-dependency\n *\n * @type {string}\n */\nexport const STORE_NAME = 'core';\n","/**\n * External dependencies\n */\nimport { castArray, isEqual, find } from 'lodash';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { receiveItems, removeItems, receiveQueriedItems } from './queried-data';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { createBatch } from './batch';\nimport { STORE_NAME } from './name';\n\n/**\n * Returns an action object used in signalling that authors have been received.\n *\n * @param {string}       queryID Query ID.\n * @param {Array|Object} users   Users received.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserQuery( queryID, users ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_QUERY',\n\t\tusers: castArray( users ),\n\t\tqueryID,\n\t};\n}\n\n/**\n * Returns an action used in signalling that the current user has been received.\n *\n * @param {Object} currentUser Current user object.\n *\n * @return {Object} Action object.\n */\nexport function receiveCurrentUser( currentUser ) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_USER',\n\t\tcurrentUser,\n\t};\n}\n\n/**\n * Returns an action object used in adding new entities.\n *\n * @param {Array} entities Entities received.\n *\n * @return {Object} Action object.\n */\nexport function addEntities( entities ) {\n\treturn {\n\t\ttype: 'ADD_ENTITIES',\n\t\tentities,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that entity records have been received.\n *\n * @param {string}       kind            Kind of the received entity.\n * @param {string}       name            Name of the received entity.\n * @param {Array|Object} records         Records received.\n * @param {?Object}      query           Query Object.\n * @param {?boolean}     invalidateCache Should invalidate query caches.\n * @param {?Object}      edits           Edits to reset.\n * @return {Object} Action object.\n */\nexport function receiveEntityRecords(\n\tkind,\n\tname,\n\trecords,\n\tquery,\n\tinvalidateCache = false,\n\tedits\n) {\n\t// Auto drafts should not have titles, but some plugins rely on them so we can't filter this\n\t// on the server.\n\tif ( kind === 'postType' ) {\n\t\trecords = castArray( records ).map( ( record ) =>\n\t\t\trecord.status === 'auto-draft' ? { ...record, title: '' } : record\n\t\t);\n\t}\n\tlet action;\n\tif ( query ) {\n\t\taction = receiveQueriedItems( records, query, edits );\n\t} else {\n\t\taction = receiveItems( records, edits );\n\t}\n\n\treturn {\n\t\t...action,\n\t\tkind,\n\t\tname,\n\t\tinvalidateCache,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the current theme has been received.\n *\n * @param {Object} currentTheme The current theme.\n *\n * @return {Object} Action object.\n */\nexport function receiveCurrentTheme( currentTheme ) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_THEME',\n\t\tcurrentTheme,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the current global styles id has been received.\n *\n * @param {string} currentGlobalStylesId The current global styles id.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveCurrentGlobalStylesId(\n\tcurrentGlobalStylesId\n) {\n\treturn {\n\t\ttype: 'RECEIVE_CURRENT_GLOBAL_STYLES_ID',\n\t\tid: currentGlobalStylesId,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the theme base global styles have been received\n *\n * @param {string} stylesheet   The theme's identifier\n * @param {Object} globalStyles The global styles object.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveThemeBaseGlobalStyles(\n\tstylesheet,\n\tglobalStyles\n) {\n\treturn {\n\t\ttype: 'RECEIVE_THEME_GLOBAL_STYLES',\n\t\tstylesheet,\n\t\tglobalStyles,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the theme global styles variations have been received.\n *\n * @param {string} stylesheet The theme's identifier\n * @param {Array}  variations The global styles variations.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalReceiveThemeGlobalStyleVariations(\n\tstylesheet,\n\tvariations\n) {\n\treturn {\n\t\ttype: 'RECEIVE_THEME_GLOBAL_STYLE_VARIATIONS',\n\t\tstylesheet,\n\t\tvariations,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the index has been received.\n *\n * @deprecated since WP 5.9, this is not useful anymore, use the selector direclty.\n *\n * @return {Object} Action object.\n */\nexport function receiveThemeSupports() {\n\tdeprecated( \"wp.data.dispatch( 'core' ).receiveThemeSupports\", {\n\t\tsince: '5.9',\n\t} );\n\n\treturn {\n\t\ttype: 'DO_NOTHING',\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the preview data for\n * a given URl has been received.\n *\n * @param {string} url     URL to preview the embed for.\n * @param {*}      preview Preview data.\n *\n * @return {Object} Action object.\n */\nexport function receiveEmbedPreview( url, preview ) {\n\treturn {\n\t\ttype: 'RECEIVE_EMBED_PREVIEW',\n\t\turl,\n\t\tpreview,\n\t};\n}\n\n/**\n * Action triggered to delete an entity record.\n *\n * @param {string}   kind                      Kind of the deleted entity.\n * @param {string}   name                      Name of the deleted entity.\n * @param {string}   recordId                  Record ID of the deleted entity.\n * @param {?Object}  query                     Special query parameters for the\n *                                             DELETE API call.\n * @param {Object}   [options]                 Delete options.\n * @param {Function} [options.__unstableFetch] Internal use only. Function to\n *                                             call instead of `apiFetch()`.\n *                                             Must return a promise.\n */\nexport const deleteEntityRecord = (\n\tkind,\n\tname,\n\trecordId,\n\tquery,\n\t{ __unstableFetch = apiFetch } = {}\n) => async ( { dispatch } ) => {\n\tconst entities = await dispatch( getKindEntities( kind ) );\n\tconst entity = find( entities, { kind, name } );\n\tlet error;\n\tlet deletedRecord = false;\n\tif ( ! entity || entity?.__experimentalNoFetch ) {\n\t\treturn;\n\t}\n\n\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\tSTORE_NAME,\n\t\t[ 'entities', 'data', kind, name, recordId ],\n\t\t{ exclusive: true }\n\t);\n\n\ttry {\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_ENTITY_RECORD_START',\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId,\n\t\t} );\n\n\t\ttry {\n\t\t\tlet path = `${ entity.baseURL }/${ recordId }`;\n\n\t\t\tif ( query ) {\n\t\t\t\tpath = addQueryArgs( path, query );\n\t\t\t}\n\n\t\t\tdeletedRecord = await __unstableFetch( {\n\t\t\t\tpath,\n\t\t\t\tmethod: 'DELETE',\n\t\t\t} );\n\n\t\t\tawait dispatch( removeItems( kind, name, recordId, true ) );\n\t\t} catch ( _error ) {\n\t\t\terror = _error;\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'DELETE_ENTITY_RECORD_FINISH',\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId,\n\t\t\terror,\n\t\t} );\n\n\t\treturn deletedRecord;\n\t} finally {\n\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t}\n};\n\n/**\n * Returns an action object that triggers an\n * edit to an entity record.\n *\n * @param {string}  kind                 Kind of the edited entity record.\n * @param {string}  name                 Name of the edited entity record.\n * @param {number}  recordId             Record ID of the edited entity record.\n * @param {Object}  edits                The edits.\n * @param {Object}  options              Options for the edit.\n * @param {boolean} [options.undoIgnore] Whether to ignore the edit in undo history or not.\n *\n * @return {Object} Action object.\n */\nexport const editEntityRecord = (\n\tkind,\n\tname,\n\trecordId,\n\tedits,\n\toptions = {}\n) => ( { select, dispatch } ) => {\n\tconst entity = select.getEntity( kind, name );\n\tif ( ! entity ) {\n\t\tthrow new Error(\n\t\t\t`The entity being edited (${ kind }, ${ name }) does not have a loaded config.`\n\t\t);\n\t}\n\tconst { transientEdits = {}, mergedEdits = {} } = entity;\n\tconst record = select.getRawEntityRecord( kind, name, recordId );\n\tconst editedRecord = select.getEditedEntityRecord( kind, name, recordId );\n\n\tconst edit = {\n\t\tkind,\n\t\tname,\n\t\trecordId,\n\t\t// Clear edits when they are equal to their persisted counterparts\n\t\t// so that the property is not considered dirty.\n\t\tedits: Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tconst recordValue = record[ key ];\n\t\t\tconst editedRecordValue = editedRecord[ key ];\n\t\t\tconst value = mergedEdits[ key ]\n\t\t\t\t? { ...editedRecordValue, ...edits[ key ] }\n\t\t\t\t: edits[ key ];\n\t\t\tacc[ key ] = isEqual( recordValue, value ) ? undefined : value;\n\t\t\treturn acc;\n\t\t}, {} ),\n\t\ttransientEdits,\n\t};\n\tdispatch( {\n\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t...edit,\n\t\tmeta: {\n\t\t\tundo: ! options.undoIgnore && {\n\t\t\t\t...edit,\n\t\t\t\t// Send the current values for things like the first undo stack entry.\n\t\t\t\tedits: Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\t\t\tacc[ key ] = editedRecord[ key ];\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {} ),\n\t\t\t},\n\t\t},\n\t} );\n};\n\n/**\n * Action triggered to undo the last edit to\n * an entity record, if any.\n */\nexport const undo = () => ( { select, dispatch } ) => {\n\tconst undoEdit = select.getUndoEdit();\n\tif ( ! undoEdit ) {\n\t\treturn;\n\t}\n\tdispatch( {\n\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t...undoEdit,\n\t\tmeta: { isUndo: true },\n\t} );\n};\n\n/**\n * Action triggered to redo the last undoed\n * edit to an entity record, if any.\n */\nexport const redo = () => ( { select, dispatch } ) => {\n\tconst redoEdit = select.getRedoEdit();\n\tif ( ! redoEdit ) {\n\t\treturn;\n\t}\n\tdispatch( {\n\t\ttype: 'EDIT_ENTITY_RECORD',\n\t\t...redoEdit,\n\t\tmeta: { isRedo: true },\n\t} );\n};\n\n/**\n * Forces the creation of a new undo level.\n *\n * @return {Object} Action object.\n */\nexport function __unstableCreateUndoLevel() {\n\treturn { type: 'CREATE_UNDO_LEVEL' };\n}\n\n/**\n * Action triggered to save an entity record.\n *\n * @param {string}   kind                       Kind of the received entity.\n * @param {string}   name                       Name of the received entity.\n * @param {Object}   record                     Record to be saved.\n * @param {Object}   options                    Saving options.\n * @param {boolean}  [options.isAutosave=false] Whether this is an autosave.\n * @param {Function} [options.__unstableFetch]  Internal use only. Function to\n *                                              call instead of `apiFetch()`.\n *                                              Must return a promise.\n */\nexport const saveEntityRecord = (\n\tkind,\n\tname,\n\trecord,\n\t{ isAutosave = false, __unstableFetch = apiFetch } = {}\n) => async ( { select, resolveSelect, dispatch } ) => {\n\tconst entities = await dispatch( getKindEntities( kind ) );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity || entity?.__experimentalNoFetch ) {\n\t\treturn;\n\t}\n\tconst entityIdKey = entity.key || DEFAULT_ENTITY_KEY;\n\tconst recordId = record[ entityIdKey ];\n\n\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\tSTORE_NAME,\n\t\t[ 'entities', 'data', kind, name, recordId || uuid() ],\n\t\t{ exclusive: true }\n\t);\n\n\ttry {\n\t\t// Evaluate optimized edits.\n\t\t// (Function edits that should be evaluated on save to avoid expensive computations on every edit.)\n\t\tfor ( const [ key, value ] of Object.entries( record ) ) {\n\t\t\tif ( typeof value === 'function' ) {\n\t\t\t\tconst evaluatedValue = value(\n\t\t\t\t\tselect.getEditedEntityRecord( kind, name, recordId )\n\t\t\t\t);\n\t\t\t\tdispatch.editEntityRecord(\n\t\t\t\t\tkind,\n\t\t\t\t\tname,\n\t\t\t\t\trecordId,\n\t\t\t\t\t{\n\t\t\t\t\t\t[ key ]: evaluatedValue,\n\t\t\t\t\t},\n\t\t\t\t\t{ undoIgnore: true }\n\t\t\t\t);\n\t\t\t\trecord[ key ] = evaluatedValue;\n\t\t\t}\n\t\t}\n\n\t\tdispatch( {\n\t\t\ttype: 'SAVE_ENTITY_RECORD_START',\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId,\n\t\t\tisAutosave,\n\t\t} );\n\t\tlet updatedRecord;\n\t\tlet error;\n\t\ttry {\n\t\t\tconst path = `${ entity.baseURL }${\n\t\t\t\trecordId ? '/' + recordId : ''\n\t\t\t}`;\n\t\t\tconst persistedRecord = select.getRawEntityRecord(\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\trecordId\n\t\t\t);\n\n\t\t\tif ( isAutosave ) {\n\t\t\t\t// Most of this autosave logic is very specific to posts.\n\t\t\t\t// This is fine for now as it is the only supported autosave,\n\t\t\t\t// but ideally this should all be handled in the back end,\n\t\t\t\t// so the client just sends and receives objects.\n\t\t\t\tconst currentUser = select.getCurrentUser();\n\t\t\t\tconst currentUserId = currentUser ? currentUser.id : undefined;\n\t\t\t\tconst autosavePost = await resolveSelect.getAutosave(\n\t\t\t\t\tpersistedRecord.type,\n\t\t\t\t\tpersistedRecord.id,\n\t\t\t\t\tcurrentUserId\n\t\t\t\t);\n\t\t\t\t// Autosaves need all expected fields to be present.\n\t\t\t\t// So we fallback to the previous autosave and then\n\t\t\t\t// to the actual persisted entity if the edits don't\n\t\t\t\t// have a value.\n\t\t\t\tlet data = { ...persistedRecord, ...autosavePost, ...record };\n\t\t\t\tdata = Object.keys( data ).reduce(\n\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t[ 'title', 'excerpt', 'content' ].includes( key )\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tacc[ key ] = data[ key ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tstatus:\n\t\t\t\t\t\t\tdata.status === 'auto-draft'\n\t\t\t\t\t\t\t\t? 'draft'\n\t\t\t\t\t\t\t\t: data.status,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tupdatedRecord = await __unstableFetch( {\n\t\t\t\t\tpath: `${ path }/autosaves`,\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tdata,\n\t\t\t\t} );\n\n\t\t\t\t// An autosave may be processed by the server as a regular save\n\t\t\t\t// when its update is requested by the author and the post had\n\t\t\t\t// draft or auto-draft status.\n\t\t\t\tif ( persistedRecord.id === updatedRecord.id ) {\n\t\t\t\t\tlet newRecord = {\n\t\t\t\t\t\t...persistedRecord,\n\t\t\t\t\t\t...data,\n\t\t\t\t\t\t...updatedRecord,\n\t\t\t\t\t};\n\t\t\t\t\tnewRecord = Object.keys( newRecord ).reduce(\n\t\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\t\t// These properties are persisted in autosaves.\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t[ 'title', 'excerpt', 'content' ].includes(\n\t\t\t\t\t\t\t\t\tkey\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tacc[ key ] = newRecord[ key ];\n\t\t\t\t\t\t\t} else if ( key === 'status' ) {\n\t\t\t\t\t\t\t\t// Status is only persisted in autosaves when going from\n\t\t\t\t\t\t\t\t// \"auto-draft\" to \"draft\".\n\t\t\t\t\t\t\t\tacc[ key ] =\n\t\t\t\t\t\t\t\t\tpersistedRecord.status === 'auto-draft' &&\n\t\t\t\t\t\t\t\t\tnewRecord.status === 'draft'\n\t\t\t\t\t\t\t\t\t\t? newRecord.status\n\t\t\t\t\t\t\t\t\t\t: persistedRecord.status;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// These properties are not persisted in autosaves.\n\t\t\t\t\t\t\t\tacc[ key ] = persistedRecord[ key ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t);\n\t\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\t\tkind,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tnewRecord,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tdispatch.receiveAutosaves(\n\t\t\t\t\t\tpersistedRecord.id,\n\t\t\t\t\t\tupdatedRecord\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet edits = record;\n\t\t\t\tif ( entity.__unstablePrePersist ) {\n\t\t\t\t\tedits = {\n\t\t\t\t\t\t...edits,\n\t\t\t\t\t\t...entity.__unstablePrePersist(\n\t\t\t\t\t\t\tpersistedRecord,\n\t\t\t\t\t\t\tedits\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tupdatedRecord = await __unstableFetch( {\n\t\t\t\t\tpath,\n\t\t\t\t\tmethod: recordId ? 'PUT' : 'POST',\n\t\t\t\t\tdata: edits,\n\t\t\t\t} );\n\t\t\t\tdispatch.receiveEntityRecords(\n\t\t\t\t\tkind,\n\t\t\t\t\tname,\n\t\t\t\t\tupdatedRecord,\n\t\t\t\t\tundefined,\n\t\t\t\t\ttrue,\n\t\t\t\t\tedits\n\t\t\t\t);\n\t\t\t}\n\t\t} catch ( _error ) {\n\t\t\terror = _error;\n\t\t}\n\t\tdispatch( {\n\t\t\ttype: 'SAVE_ENTITY_RECORD_FINISH',\n\t\t\tkind,\n\t\t\tname,\n\t\t\trecordId,\n\t\t\terror,\n\t\t\tisAutosave,\n\t\t} );\n\n\t\treturn updatedRecord;\n\t} finally {\n\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t}\n};\n\n/**\n * Runs multiple core-data actions at the same time using one API request.\n *\n * Example:\n *\n * ```\n * const [ savedRecord, updatedRecord, deletedRecord ] =\n *   await dispatch( 'core' ).__experimentalBatch( [\n *     ( { saveEntityRecord } ) => saveEntityRecord( 'root', 'widget', widget ),\n *     ( { saveEditedEntityRecord } ) => saveEntityRecord( 'root', 'widget', 123 ),\n *     ( { deleteEntityRecord } ) => deleteEntityRecord( 'root', 'widget', 123, null ),\n *   ] );\n * ```\n *\n * @param {Array} requests Array of functions which are invoked simultaneously.\n *                         Each function is passed an object containing\n *                         `saveEntityRecord`, `saveEditedEntityRecord`, and\n *                         `deleteEntityRecord`.\n *\n * @return {(thunkArgs: Object) => Promise} A promise that resolves to an array containing the return\n *                                          values of each function given in `requests`.\n */\nexport const __experimentalBatch = ( requests ) => async ( { dispatch } ) => {\n\tconst batch = createBatch();\n\tconst api = {\n\t\tsaveEntityRecord( kind, name, record, options ) {\n\t\t\treturn batch.add( ( add ) =>\n\t\t\t\tdispatch.saveEntityRecord( kind, name, record, {\n\t\t\t\t\t...options,\n\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t} )\n\t\t\t);\n\t\t},\n\t\tsaveEditedEntityRecord( kind, name, recordId, options ) {\n\t\t\treturn batch.add( ( add ) =>\n\t\t\t\tdispatch.saveEditedEntityRecord( kind, name, recordId, {\n\t\t\t\t\t...options,\n\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t} )\n\t\t\t);\n\t\t},\n\t\tdeleteEntityRecord( kind, name, recordId, query, options ) {\n\t\t\treturn batch.add( ( add ) =>\n\t\t\t\tdispatch.deleteEntityRecord( kind, name, recordId, query, {\n\t\t\t\t\t...options,\n\t\t\t\t\t__unstableFetch: add,\n\t\t\t\t} )\n\t\t\t);\n\t\t},\n\t};\n\tconst resultPromises = requests.map( ( request ) => request( api ) );\n\tconst [ , ...results ] = await Promise.all( [\n\t\tbatch.run(),\n\t\t...resultPromises,\n\t] );\n\treturn results;\n};\n\n/**\n * Action triggered to save an entity record's edits.\n *\n * @param {string} kind     Kind of the entity.\n * @param {string} name     Name of the entity.\n * @param {Object} recordId ID of the record.\n * @param {Object} options  Saving options.\n */\nexport const saveEditedEntityRecord = (\n\tkind,\n\tname,\n\trecordId,\n\toptions\n) => async ( { select, dispatch } ) => {\n\tif ( ! select.hasEditsForEntityRecord( kind, name, recordId ) ) {\n\t\treturn;\n\t}\n\tconst entities = await dispatch( getKindEntities( kind ) );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\tconst entityIdKey = entity.key || DEFAULT_ENTITY_KEY;\n\n\tconst edits = select.getEntityRecordNonTransientEdits(\n\t\tkind,\n\t\tname,\n\t\trecordId\n\t);\n\tconst record = { [ entityIdKey ]: recordId, ...edits };\n\treturn await dispatch.saveEntityRecord( kind, name, record, options );\n};\n\n/**\n * Action triggered to save only specified properties for the entity.\n *\n * @param {string} kind        Kind of the entity.\n * @param {string} name        Name of the entity.\n * @param {Object} recordId    ID of the record.\n * @param {Array}  itemsToSave List of entity properties to save.\n * @param {Object} options     Saving options.\n */\nexport const __experimentalSaveSpecifiedEntityEdits = (\n\tkind,\n\tname,\n\trecordId,\n\titemsToSave,\n\toptions\n) => async ( { select, dispatch } ) => {\n\tif ( ! select.hasEditsForEntityRecord( kind, name, recordId ) ) {\n\t\treturn;\n\t}\n\tconst edits = select.getEntityRecordNonTransientEdits(\n\t\tkind,\n\t\tname,\n\t\trecordId\n\t);\n\tconst editsToSave = {};\n\tfor ( const edit in edits ) {\n\t\tif ( itemsToSave.some( ( item ) => item === edit ) ) {\n\t\t\teditsToSave[ edit ] = edits[ edit ];\n\t\t}\n\t}\n\treturn await dispatch.saveEntityRecord( kind, name, editsToSave, options );\n};\n\n/**\n * Returns an action object used in signalling that Upload permissions have been received.\n *\n * @deprecated since WP 5.9, use receiveUserPermission instead.\n *\n * @param {boolean} hasUploadPermissions Does the user have permission to upload files?\n *\n * @return {Object} Action object.\n */\nexport function receiveUploadPermissions( hasUploadPermissions ) {\n\tdeprecated( \"wp.data.dispatch( 'core' ).receiveUploadPermissions\", {\n\t\tsince: '5.9',\n\t\talternative: 'receiveUserPermission',\n\t} );\n\n\treturn receiveUserPermission( 'create/media', hasUploadPermissions );\n}\n\n/**\n * Returns an action object used in signalling that the current user has\n * permission to perform an action on a REST resource.\n *\n * @param {string}  key       A key that represents the action and REST resource.\n * @param {boolean} isAllowed Whether or not the user can perform the action.\n *\n * @return {Object} Action object.\n */\nexport function receiveUserPermission( key, isAllowed ) {\n\treturn {\n\t\ttype: 'RECEIVE_USER_PERMISSION',\n\t\tkey,\n\t\tisAllowed,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that the autosaves for a\n * post have been received.\n *\n * @param {number}       postId    The id of the post that is parent to the autosave.\n * @param {Array|Object} autosaves An array of autosaves or singular autosave object.\n *\n * @return {Object} Action object.\n */\nexport function receiveAutosaves( postId, autosaves ) {\n\treturn {\n\t\ttype: 'RECEIVE_AUTOSAVES',\n\t\tpostId,\n\t\tautosaves: castArray( autosaves ),\n\t};\n}\n","/**\n * External dependencies\n */\nimport { upperFirst, camelCase, map, find, get, startCase } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { addEntities } from './actions';\n\nexport const DEFAULT_ENTITY_KEY = 'id';\n\nconst POST_RAW_ATTRIBUTES = [ 'title', 'excerpt', 'content' ];\n\nexport const defaultEntities = [\n\t{\n\t\tlabel: __( 'Base' ),\n\t\tname: '__unstableBase',\n\t\tkind: 'root',\n\t\tbaseURL: '/',\n\t},\n\t{\n\t\tlabel: __( 'Site' ),\n\t\tname: 'site',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/settings',\n\t\tgetTitle: ( record ) => {\n\t\t\treturn get( record, [ 'title' ], __( 'Site Title' ) );\n\t\t},\n\t},\n\t{\n\t\tlabel: __( 'Post Type' ),\n\t\tname: 'postType',\n\t\tkind: 'root',\n\t\tkey: 'slug',\n\t\tbaseURL: '/wp/v2/types',\n\t\tbaseURLParams: { context: 'edit' },\n\t\trawAttributes: POST_RAW_ATTRIBUTES,\n\t},\n\t{\n\t\tname: 'media',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/media',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'mediaItems',\n\t\tlabel: __( 'Media' ),\n\t},\n\t{\n\t\tname: 'taxonomy',\n\t\tkind: 'root',\n\t\tkey: 'slug',\n\t\tbaseURL: '/wp/v2/taxonomies',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'taxonomies',\n\t\tlabel: __( 'Taxonomy' ),\n\t},\n\t{\n\t\tname: 'sidebar',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/sidebars',\n\t\tplural: 'sidebars',\n\t\ttransientEdits: { blocks: true },\n\t\tlabel: __( 'Widget areas' ),\n\t},\n\t{\n\t\tname: 'widget',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/widgets',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'widgets',\n\t\ttransientEdits: { blocks: true },\n\t\tlabel: __( 'Widgets' ),\n\t},\n\t{\n\t\tname: 'widgetType',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/widget-types',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'widgetTypes',\n\t\tlabel: __( 'Widget types' ),\n\t},\n\t{\n\t\tlabel: __( 'User' ),\n\t\tname: 'user',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/users',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'users',\n\t},\n\t{\n\t\tname: 'comment',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/comments',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'comments',\n\t\tlabel: __( 'Comment' ),\n\t},\n\t{\n\t\tname: 'menu',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/menus',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'menus',\n\t\tlabel: __( 'Menu' ),\n\t},\n\t{\n\t\tname: 'menuItem',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/menu-items',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'menuItems',\n\t\tlabel: __( 'Menu Item' ),\n\t\trawAttributes: [ 'title', 'content' ],\n\t},\n\t{\n\t\tname: 'menuLocation',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/menu-locations',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'menuLocations',\n\t\tlabel: __( 'Menu Location' ),\n\t\tkey: 'name',\n\t},\n\t{\n\t\tname: 'navigationArea',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/block-navigation-areas',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'navigationAreas',\n\t\tlabel: __( 'Navigation Area' ),\n\t\tkey: 'name',\n\t\tgetTitle: ( record ) => record?.description,\n\t},\n\t{\n\t\tlabel: __( 'Global Styles' ),\n\t\tname: 'globalStyles',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/global-styles',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tplural: 'globalStylesVariations', // Should be different than name.\n\t\tgetTitle: ( record ) => record?.title?.rendered || record?.title,\n\t},\n\t{\n\t\tlabel: __( 'Themes' ),\n\t\tname: 'theme',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/themes',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tkey: 'stylesheet',\n\t},\n\t{\n\t\tlabel: __( 'Plugins' ),\n\t\tname: 'plugin',\n\t\tkind: 'root',\n\t\tbaseURL: '/wp/v2/plugins',\n\t\tbaseURLParams: { context: 'edit' },\n\t\tkey: 'plugin',\n\t},\n];\n\nexport const kinds = [\n\t{ name: 'postType', loadEntities: loadPostTypeEntities },\n\t{ name: 'taxonomy', loadEntities: loadTaxonomyEntities },\n];\n\n/**\n * Returns a function to be used to retrieve extra edits to apply before persisting a post type.\n *\n * @param {Object} persistedRecord Already persisted Post\n * @param {Object} edits           Edits.\n * @return {Object} Updated edits.\n */\nexport const prePersistPostType = ( persistedRecord, edits ) => {\n\tconst newEdits = {};\n\n\tif ( persistedRecord?.status === 'auto-draft' ) {\n\t\t// Saving an auto-draft should create a draft by default.\n\t\tif ( ! edits.status && ! newEdits.status ) {\n\t\t\tnewEdits.status = 'draft';\n\t\t}\n\n\t\t// Fix the auto-draft default title.\n\t\tif (\n\t\t\t( ! edits.title || edits.title === 'Auto Draft' ) &&\n\t\t\t! newEdits.title &&\n\t\t\t( ! persistedRecord?.title ||\n\t\t\t\tpersistedRecord?.title === 'Auto Draft' )\n\t\t) {\n\t\t\tnewEdits.title = '';\n\t\t}\n\t}\n\n\treturn newEdits;\n};\n\n/**\n * Returns the list of post type entities.\n *\n * @return {Promise} Entities promise\n */\nasync function loadPostTypeEntities() {\n\tconst postTypes = await apiFetch( { path: '/wp/v2/types?context=view' } );\n\treturn map( postTypes, ( postType, name ) => {\n\t\tconst isTemplate = [ 'wp_template', 'wp_template_part' ].includes(\n\t\t\tname\n\t\t);\n\t\tconst namespace = postType?.rest_namespace ?? 'wp/v2';\n\t\treturn {\n\t\t\tkind: 'postType',\n\t\t\tbaseURL: `/${ namespace }/${ postType.rest_base }`,\n\t\t\tbaseURLParams: { context: 'edit' },\n\t\t\tname,\n\t\t\tlabel: postType.name,\n\t\t\ttransientEdits: {\n\t\t\t\tblocks: true,\n\t\t\t\tselection: true,\n\t\t\t},\n\t\t\tmergedEdits: { meta: true },\n\t\t\trawAttributes: POST_RAW_ATTRIBUTES,\n\t\t\tgetTitle: ( record ) =>\n\t\t\t\trecord?.title?.rendered ||\n\t\t\t\trecord?.title ||\n\t\t\t\t( isTemplate ? startCase( record.slug ) : String( record.id ) ),\n\t\t\t__unstablePrePersist: isTemplate ? undefined : prePersistPostType,\n\t\t\t__unstable_rest_base: postType.rest_base,\n\t\t};\n\t} );\n}\n\n/**\n * Returns the list of the taxonomies entities.\n *\n * @return {Promise} Entities promise\n */\nasync function loadTaxonomyEntities() {\n\tconst taxonomies = await apiFetch( {\n\t\tpath: '/wp/v2/taxonomies?context=view',\n\t} );\n\treturn map( taxonomies, ( taxonomy, name ) => {\n\t\tconst namespace = taxonomy?.rest_namespace ?? 'wp/v2';\n\t\treturn {\n\t\t\tkind: 'taxonomy',\n\t\t\tbaseURL: `/${ namespace }/${ taxonomy.rest_base }`,\n\t\t\tbaseURLParams: { context: 'edit' },\n\t\t\tname,\n\t\t\tlabel: taxonomy.name,\n\t\t};\n\t} );\n}\n\n/**\n * Returns the entity's getter method name given its kind and name.\n *\n * @param {string}  kind      Entity kind.\n * @param {string}  name      Entity name.\n * @param {string}  prefix    Function prefix.\n * @param {boolean} usePlural Whether to use the plural form or not.\n *\n * @return {string} Method name\n */\nexport const getMethodName = (\n\tkind,\n\tname,\n\tprefix = 'get',\n\tusePlural = false\n) => {\n\tconst entity = find( defaultEntities, { kind, name } );\n\tconst kindPrefix = kind === 'root' ? '' : upperFirst( camelCase( kind ) );\n\tconst nameSuffix =\n\t\tupperFirst( camelCase( name ) ) + ( usePlural ? 's' : '' );\n\tconst suffix =\n\t\tusePlural && entity.plural\n\t\t\t? upperFirst( camelCase( entity.plural ) )\n\t\t\t: nameSuffix;\n\treturn `${ prefix }${ kindPrefix }${ suffix }`;\n};\n\n/**\n * Loads the kind entities into the store.\n *\n * @param {string} kind Kind\n *\n * @return {Array} Entities\n */\nexport const getKindEntities = ( kind ) => async ( { select, dispatch } ) => {\n\tlet entities = select.getEntitiesByKind( kind );\n\tif ( entities && entities.length !== 0 ) {\n\t\treturn entities;\n\t}\n\n\tconst kindConfig = find( kinds, { name: kind } );\n\tif ( ! kindConfig ) {\n\t\treturn [];\n\t}\n\n\tentities = await kindConfig.loadEntities();\n\tdispatch( addEntities( entities ) );\n\n\treturn entities;\n};\n","/**\n * Given a value which can be specified as one or the other of a comma-separated\n * string or an array, returns a value normalized to an array of strings, or\n * null if the value cannot be interpreted as either.\n *\n * @param {string|string[]|*} value\n *\n * @return {?(string[])} Normalized field value.\n */\nfunction getNormalizedCommaSeparable( value ) {\n\tif ( typeof value === 'string' ) {\n\t\treturn value.split( ',' );\n\t} else if ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\n\treturn null;\n}\n\nexport default getNormalizedCommaSeparable;\n","/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport { withWeakMapCache, getNormalizedCommaSeparable } from '../utils';\n\n/**\n * An object of properties describing a specific query.\n *\n * @typedef {Object} WPQueriedDataQueryParts\n *\n * @property {number}      page      The query page (1-based index, default 1).\n * @property {number}      perPage   Items per page for query (default 10).\n * @property {string}      stableKey An encoded stable string of all non-\n *                                   pagination, non-fields query parameters.\n * @property {?(string[])} fields    Target subset of fields to derive from\n *                                   item objects.\n * @property {?(number[])} include   Specific item IDs to include.\n * @property {string}      context   Scope under which the request is made;\n *                                   determines returned fields in response.\n */\n\n/**\n * Given a query object, returns an object of parts, including pagination\n * details (`page` and `perPage`, or default values). All other properties are\n * encoded into a stable (idempotent) `stableKey` value.\n *\n * @param {Object} query Optional query object.\n *\n * @return {WPQueriedDataQueryParts} Query parts.\n */\nexport function getQueryParts( query ) {\n\t/**\n\t * @type {WPQueriedDataQueryParts}\n\t */\n\tconst parts = {\n\t\tstableKey: '',\n\t\tpage: 1,\n\t\tperPage: 10,\n\t\tfields: null,\n\t\tinclude: null,\n\t\tcontext: 'default',\n\t};\n\n\t// Ensure stable key by sorting keys. Also more efficient for iterating.\n\tconst keys = Object.keys( query ).sort();\n\n\tfor ( let i = 0; i < keys.length; i++ ) {\n\t\tconst key = keys[ i ];\n\t\tlet value = query[ key ];\n\n\t\tswitch ( key ) {\n\t\t\tcase 'page':\n\t\t\t\tparts[ key ] = Number( value );\n\t\t\t\tbreak;\n\n\t\t\tcase 'per_page':\n\t\t\t\tparts.perPage = Number( value );\n\t\t\t\tbreak;\n\n\t\t\tcase 'context':\n\t\t\t\tparts.context = value;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// While in theory, we could exclude \"_fields\" from the stableKey\n\t\t\t\t// because two request with different fields have the same results\n\t\t\t\t// We're not able to ensure that because the server can decide to omit\n\t\t\t\t// fields from the response even if we explicitely asked for it.\n\t\t\t\t// Example: Asking for titles in posts without title support.\n\t\t\t\tif ( key === '_fields' ) {\n\t\t\t\t\tparts.fields = getNormalizedCommaSeparable( value );\n\t\t\t\t\t// Make sure to normalize value for `stableKey`\n\t\t\t\t\tvalue = parts.fields.join();\n\t\t\t\t}\n\n\t\t\t\t// Two requests with different include values cannot have same results.\n\t\t\t\tif ( key === 'include' ) {\n\t\t\t\t\tparts.include = getNormalizedCommaSeparable( value ).map(\n\t\t\t\t\t\tNumber\n\t\t\t\t\t);\n\t\t\t\t\t// Normalize value for `stableKey`.\n\t\t\t\t\tvalue = parts.include.join();\n\t\t\t\t}\n\n\t\t\t\t// While it could be any deterministic string, for simplicity's\n\t\t\t\t// sake mimic querystring encoding for stable key.\n\t\t\t\t//\n\t\t\t\t// TODO: For consistency with PHP implementation, addQueryArgs\n\t\t\t\t// should accept a key value pair, which may optimize its\n\t\t\t\t// implementation for our use here, vs. iterating an object\n\t\t\t\t// with only a single key.\n\t\t\t\tparts.stableKey +=\n\t\t\t\t\t( parts.stableKey ? '&' : '' ) +\n\t\t\t\t\taddQueryArgs( '', { [ key ]: value } ).slice( 1 );\n\t\t}\n\t}\n\n\treturn parts;\n}\n\nexport default withWeakMapCache( getQueryParts );\n","/**\n * External dependencies\n */\nimport { isObjectLike } from 'lodash';\n\n/**\n * Given a function, returns an enhanced function which caches the result and\n * tracks in WeakMap. The result is only cached if the original function is\n * passed a valid object-like argument (requirement for WeakMap key).\n *\n * @param {Function} fn Original function.\n *\n * @return {Function} Enhanced caching function.\n */\nfunction withWeakMapCache( fn ) {\n\tconst cache = new WeakMap();\n\n\treturn ( key ) => {\n\t\tlet value;\n\t\tif ( cache.has( key ) ) {\n\t\t\tvalue = cache.get( key );\n\t\t} else {\n\t\t\tvalue = fn( key );\n\n\t\t\t// Can reach here if key is not valid for WeakMap, since `has`\n\t\t\t// will return false for invalid key. Since `set` will throw,\n\t\t\t// ensure that key is valid before setting into cache.\n\t\t\tif ( isObjectLike( key ) ) {\n\t\t\t\tcache.set( key, value );\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t};\n}\n\nexport default withWeakMapCache;\n","/**\n * External dependencies\n */\nimport { map, flowRight, omit, filter, mapValues } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\tconservativeMapItem,\n\tifMatchingAction,\n\treplaceAction,\n\tonSubKey,\n} from '../utils';\nimport { DEFAULT_ENTITY_KEY } from '../entities';\nimport getQueryParts from './get-query-parts';\n\nfunction getContextFromAction( action ) {\n\tconst { query } = action;\n\tif ( ! query ) {\n\t\treturn 'default';\n\t}\n\n\tconst queryParts = getQueryParts( query );\n\treturn queryParts.context;\n}\n\n/**\n * Returns a merged array of item IDs, given details of the received paginated\n * items. The array is sparse-like with `undefined` entries where holes exist.\n *\n * @param {?Array<number>} itemIds     Original item IDs (default empty array).\n * @param {number[]}       nextItemIds Item IDs to merge.\n * @param {number}         page        Page of items merged.\n * @param {number}         perPage     Number of items per page.\n *\n * @return {number[]} Merged array of item IDs.\n */\nexport function getMergedItemIds( itemIds, nextItemIds, page, perPage ) {\n\tconst receivedAllIds = page === 1 && perPage === -1;\n\tif ( receivedAllIds ) {\n\t\treturn nextItemIds;\n\t}\n\tconst nextItemIdsStartIndex = ( page - 1 ) * perPage;\n\n\t// If later page has already been received, default to the larger known\n\t// size of the existing array, else calculate as extending the existing.\n\tconst size = Math.max(\n\t\titemIds.length,\n\t\tnextItemIdsStartIndex + nextItemIds.length\n\t);\n\n\t// Preallocate array since size is known.\n\tconst mergedItemIds = new Array( size );\n\n\tfor ( let i = 0; i < size; i++ ) {\n\t\t// Preserve existing item ID except for subset of range of next items.\n\t\tconst isInNextItemsRange =\n\t\t\ti >= nextItemIdsStartIndex &&\n\t\t\ti < nextItemIdsStartIndex + nextItemIds.length;\n\n\t\tmergedItemIds[ i ] = isInNextItemsRange\n\t\t\t? nextItemIds[ i - nextItemIdsStartIndex ]\n\t\t\t: itemIds[ i ];\n\t}\n\n\treturn mergedItemIds;\n}\n\n/**\n * Reducer tracking items state, keyed by ID. Items are assumed to be normal,\n * where identifiers are common across all queries.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nexport function items( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS': {\n\t\t\tconst context = getContextFromAction( action );\n\t\t\tconst key = action.key || DEFAULT_ENTITY_KEY;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ context ]: {\n\t\t\t\t\t...state[ context ],\n\t\t\t\t\t...action.items.reduce( ( accumulator, value ) => {\n\t\t\t\t\t\tconst itemId = value[ key ];\n\t\t\t\t\t\taccumulator[ itemId ] = conservativeMapItem(\n\t\t\t\t\t\t\tstate?.[ context ]?.[ itemId ],\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}, {} ),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tcase 'REMOVE_ITEMS':\n\t\t\treturn mapValues( state, ( contextState ) =>\n\t\t\t\tomit( contextState, action.itemIds )\n\t\t\t);\n\t}\n\treturn state;\n}\n\n/**\n * Reducer tracking item completeness, keyed by ID. A complete item is one for\n * which all fields are known. This is used in supporting `_fields` queries,\n * where not all properties associated with an entity are necessarily returned.\n * In such cases, completeness is used as an indication of whether it would be\n * safe to use queried data for a non-`_fields`-limited request.\n *\n * @param {Object<string,boolean>} state  Current state.\n * @param {Object}                 action Dispatched action.\n *\n * @return {Object<string,boolean>} Next state.\n */\nexport function itemIsComplete( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS': {\n\t\t\tconst context = getContextFromAction( action );\n\t\t\tconst { query, key = DEFAULT_ENTITY_KEY } = action;\n\n\t\t\t// An item is considered complete if it is received without an associated\n\t\t\t// fields query. Ideally, this would be implemented in such a way where the\n\t\t\t// complete aggregate of all fields would satisfy completeness. Since the\n\t\t\t// fields are not consistent across all entity types, this would require\n\t\t\t// introspection on the REST schema for each entity to know which fields\n\t\t\t// compose a complete item for that entity.\n\t\t\tconst queryParts = query ? getQueryParts( query ) : {};\n\t\t\tconst isCompleteQuery =\n\t\t\t\t! query || ! Array.isArray( queryParts.fields );\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ context ]: {\n\t\t\t\t\t...state[ context ],\n\t\t\t\t\t...action.items.reduce( ( result, item ) => {\n\t\t\t\t\t\tconst itemId = item[ key ];\n\n\t\t\t\t\t\t// Defer to completeness if already assigned. Technically the\n\t\t\t\t\t\t// data may be outdated if receiving items for a field subset.\n\t\t\t\t\t\tresult[ itemId ] =\n\t\t\t\t\t\t\tstate?.[ context ]?.[ itemId ] || isCompleteQuery;\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}, {} ),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tcase 'REMOVE_ITEMS':\n\t\t\treturn mapValues( state, ( contextState ) =>\n\t\t\t\tomit( contextState, action.itemIds )\n\t\t\t);\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer tracking queries state, keyed by stable query key. Each reducer\n * query object includes `itemIds` and `requestingPageByPerPage`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst receiveQueries = flowRight( [\n\t// Limit to matching action type so we don't attempt to replace action on\n\t// an unhandled action.\n\tifMatchingAction( ( action ) => 'query' in action ),\n\n\t// Inject query parts into action for use both in `onSubKey` and reducer.\n\treplaceAction( ( action ) => {\n\t\t// `ifMatchingAction` still passes on initialization, where state is\n\t\t// undefined and a query is not assigned. Avoid attempting to parse\n\t\t// parts. `onSubKey` will omit by lack of `stableKey`.\n\t\tif ( action.query ) {\n\t\t\treturn {\n\t\t\t\t...action,\n\t\t\t\t...getQueryParts( action.query ),\n\t\t\t};\n\t\t}\n\n\t\treturn action;\n\t} ),\n\n\tonSubKey( 'context' ),\n\n\t// Queries shape is shared, but keyed by query `stableKey` part. Original\n\t// reducer tracks only a single query object.\n\tonSubKey( 'stableKey' ),\n] )( ( state = null, action ) => {\n\tconst { type, page, perPage, key = DEFAULT_ENTITY_KEY } = action;\n\n\tif ( type !== 'RECEIVE_ITEMS' ) {\n\t\treturn state;\n\t}\n\n\treturn getMergedItemIds(\n\t\tstate || [],\n\t\tmap( action.items, key ),\n\t\tpage,\n\t\tperPage\n\t);\n} );\n\n/**\n * Reducer tracking queries state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Next state.\n */\nconst queries = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_ITEMS':\n\t\t\treturn receiveQueries( state, action );\n\t\tcase 'REMOVE_ITEMS':\n\t\t\tconst removedItems = action.itemIds.reduce( ( result, itemId ) => {\n\t\t\t\tresult[ itemId ] = true;\n\t\t\t\treturn result;\n\t\t\t}, {} );\n\n\t\t\treturn mapValues( state, ( contextQueries ) => {\n\t\t\t\treturn mapValues( contextQueries, ( queryItems ) => {\n\t\t\t\t\treturn filter( queryItems, ( queryId ) => {\n\t\t\t\t\t\treturn ! removedItems[ queryId ];\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t} );\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default combineReducers( {\n\titems,\n\titemIsComplete,\n\tqueries,\n} );\n","/**\n * External dependencies\n */\nimport { keyBy, map, groupBy, flowRight, isEqual, get } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\n/**\n * Internal dependencies\n */\nimport { ifMatchingAction, replaceAction } from './utils';\nimport { reducer as queriedDataReducer } from './queried-data';\nimport { defaultEntities, DEFAULT_ENTITY_KEY } from './entities';\n\n/**\n * Reducer managing terms state. Keyed by taxonomy slug, the value is either\n * undefined (if no request has been made for given taxonomy), null (if a\n * request is in-flight for given taxonomy), or the array of terms for the\n * taxonomy.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function terms( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_TERMS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.taxonomy ]: action.terms,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing authors state. Keyed by id.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function users( state = { byId: {}, queries: {} }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_USER_QUERY':\n\t\t\treturn {\n\t\t\t\tbyId: {\n\t\t\t\t\t...state.byId,\n\t\t\t\t\t...keyBy( action.users, 'id' ),\n\t\t\t\t},\n\t\t\t\tqueries: {\n\t\t\t\t\t...state.queries,\n\t\t\t\t\t[ action.queryID ]: map(\n\t\t\t\t\t\taction.users,\n\t\t\t\t\t\t( user ) => user.id\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing current user state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function currentUser( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_CURRENT_USER':\n\t\t\treturn action.currentUser;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing taxonomies.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function taxonomies( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_TAXONOMIES':\n\t\t\treturn action.taxonomies;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the current theme.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function currentTheme( state = undefined, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_CURRENT_THEME':\n\t\t\treturn action.currentTheme.stylesheet;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the current global styles id.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function currentGlobalStylesId( state = undefined, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_CURRENT_GLOBAL_STYLES_ID':\n\t\t\treturn action.id;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the theme base global styles.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function themeBaseGlobalStyles( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_THEME_GLOBAL_STYLES':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.stylesheet ]: action.globalStyles,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing the theme global styles variations.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function themeGlobalStyleVariations( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_THEME_GLOBAL_STYLE_VARIATIONS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.stylesheet ]: action.variations,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Higher Order Reducer for a given entity config. It supports:\n *\n *  - Fetching\n *  - Editing\n *  - Saving\n *\n * @param {Object} entityConfig Entity config.\n *\n * @return {Function} Reducer.\n */\nfunction entity( entityConfig ) {\n\treturn flowRight( [\n\t\t// Limit to matching action type so we don't attempt to replace action on\n\t\t// an unhandled action.\n\t\tifMatchingAction(\n\t\t\t( action ) =>\n\t\t\t\taction.name &&\n\t\t\t\taction.kind &&\n\t\t\t\taction.name === entityConfig.name &&\n\t\t\t\taction.kind === entityConfig.kind\n\t\t),\n\n\t\t// Inject the entity config into the action.\n\t\treplaceAction( ( action ) => {\n\t\t\treturn {\n\t\t\t\t...action,\n\t\t\t\tkey: entityConfig.key || DEFAULT_ENTITY_KEY,\n\t\t\t};\n\t\t} ),\n\t] )(\n\t\tcombineReducers( {\n\t\t\tqueriedData: queriedDataReducer,\n\n\t\t\tedits: ( state = {}, action ) => {\n\t\t\t\tswitch ( action.type ) {\n\t\t\t\t\tcase 'RECEIVE_ITEMS':\n\t\t\t\t\t\tconst context = action?.query?.context ?? 'default';\n\t\t\t\t\t\tif ( context !== 'default' ) {\n\t\t\t\t\t\t\treturn state;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst nextState = { ...state };\n\n\t\t\t\t\t\tfor ( const record of action.items ) {\n\t\t\t\t\t\t\tconst recordId = record[ action.key ];\n\t\t\t\t\t\t\tconst edits = nextState[ recordId ];\n\t\t\t\t\t\t\tif ( ! edits ) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst nextEdits = Object.keys( edits ).reduce(\n\t\t\t\t\t\t\t\t( acc, key ) => {\n\t\t\t\t\t\t\t\t\t// If the edited value is still different to the persisted value,\n\t\t\t\t\t\t\t\t\t// keep the edited value in edits.\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t// Edits are the \"raw\" attribute values, but records may have\n\t\t\t\t\t\t\t\t\t\t// objects with more properties, so we use `get` here for the\n\t\t\t\t\t\t\t\t\t\t// comparison.\n\t\t\t\t\t\t\t\t\t\t! isEqual(\n\t\t\t\t\t\t\t\t\t\t\tedits[ key ],\n\t\t\t\t\t\t\t\t\t\t\tget(\n\t\t\t\t\t\t\t\t\t\t\t\trecord[ key ],\n\t\t\t\t\t\t\t\t\t\t\t\t'raw',\n\t\t\t\t\t\t\t\t\t\t\t\trecord[ key ]\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t) &&\n\t\t\t\t\t\t\t\t\t\t// Sometimes the server alters the sent value which means\n\t\t\t\t\t\t\t\t\t\t// we need to also remove the edits before the api request.\n\t\t\t\t\t\t\t\t\t\t( ! action.persistedEdits ||\n\t\t\t\t\t\t\t\t\t\t\t! isEqual(\n\t\t\t\t\t\t\t\t\t\t\t\tedits[ key ],\n\t\t\t\t\t\t\t\t\t\t\t\taction.persistedEdits[ key ]\n\t\t\t\t\t\t\t\t\t\t\t) )\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif ( Object.keys( nextEdits ).length ) {\n\t\t\t\t\t\t\t\tnextState[ recordId ] = nextEdits;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdelete nextState[ recordId ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn nextState;\n\n\t\t\t\t\tcase 'EDIT_ENTITY_RECORD':\n\t\t\t\t\t\tconst nextEdits = {\n\t\t\t\t\t\t\t...state[ action.recordId ],\n\t\t\t\t\t\t\t...action.edits,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tObject.keys( nextEdits ).forEach( ( key ) => {\n\t\t\t\t\t\t\t// Delete cleared edits so that the properties\n\t\t\t\t\t\t\t// are not considered dirty.\n\t\t\t\t\t\t\tif ( nextEdits[ key ] === undefined ) {\n\t\t\t\t\t\t\t\tdelete nextEdits[ key ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ action.recordId ]: nextEdits,\n\t\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t},\n\n\t\t\tsaving: ( state = {}, action ) => {\n\t\t\t\tswitch ( action.type ) {\n\t\t\t\t\tcase 'SAVE_ENTITY_RECORD_START':\n\t\t\t\t\tcase 'SAVE_ENTITY_RECORD_FINISH':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ action.recordId ]: {\n\t\t\t\t\t\t\t\tpending:\n\t\t\t\t\t\t\t\t\taction.type === 'SAVE_ENTITY_RECORD_START',\n\t\t\t\t\t\t\t\terror: action.error,\n\t\t\t\t\t\t\t\tisAutosave: action.isAutosave,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t},\n\n\t\t\tdeleting: ( state = {}, action ) => {\n\t\t\t\tswitch ( action.type ) {\n\t\t\t\t\tcase 'DELETE_ENTITY_RECORD_START':\n\t\t\t\t\tcase 'DELETE_ENTITY_RECORD_FINISH':\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ action.recordId ]: {\n\t\t\t\t\t\t\t\tpending:\n\t\t\t\t\t\t\t\t\taction.type ===\n\t\t\t\t\t\t\t\t\t'DELETE_ENTITY_RECORD_START',\n\t\t\t\t\t\t\t\terror: action.error,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t},\n\t\t} )\n\t);\n}\n\n/**\n * Reducer keeping track of the registered entities.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function entitiesConfig( state = defaultEntities, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ADD_ENTITIES':\n\t\t\treturn [ ...state, ...action.entities ];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer keeping track of the registered entities config and data.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const entities = ( state = {}, action ) => {\n\tconst newConfig = entitiesConfig( state.config, action );\n\n\t// Generates a dynamic reducer for the entities.\n\tlet entitiesDataReducer = state.reducer;\n\tif ( ! entitiesDataReducer || newConfig !== state.config ) {\n\t\tconst entitiesByKind = groupBy( newConfig, 'kind' );\n\t\tentitiesDataReducer = combineReducers(\n\t\t\tObject.entries( entitiesByKind ).reduce(\n\t\t\t\t( memo, [ kind, subEntities ] ) => {\n\t\t\t\t\tconst kindReducer = combineReducers(\n\t\t\t\t\t\tsubEntities.reduce(\n\t\t\t\t\t\t\t( kindMemo, entityConfig ) => ( {\n\t\t\t\t\t\t\t\t...kindMemo,\n\t\t\t\t\t\t\t\t[ entityConfig.name ]: entity( entityConfig ),\n\t\t\t\t\t\t\t} ),\n\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\tmemo[ kind ] = kindReducer;\n\t\t\t\t\treturn memo;\n\t\t\t\t},\n\t\t\t\t{}\n\t\t\t)\n\t\t);\n\t}\n\n\tconst newData = entitiesDataReducer( state.data, action );\n\n\tif (\n\t\tnewData === state.data &&\n\t\tnewConfig === state.config &&\n\t\tentitiesDataReducer === state.reducer\n\t) {\n\t\treturn state;\n\t}\n\n\treturn {\n\t\treducer: entitiesDataReducer,\n\t\tdata: newData,\n\t\tconfig: newConfig,\n\t};\n};\n\n/**\n * Reducer keeping track of entity edit undo history.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nconst UNDO_INITIAL_STATE = [];\nUNDO_INITIAL_STATE.offset = 0;\nlet lastEditAction;\nexport function undo( state = UNDO_INITIAL_STATE, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'EDIT_ENTITY_RECORD':\n\t\tcase 'CREATE_UNDO_LEVEL':\n\t\t\tlet isCreateUndoLevel = action.type === 'CREATE_UNDO_LEVEL';\n\t\t\tconst isUndoOrRedo =\n\t\t\t\t! isCreateUndoLevel &&\n\t\t\t\t( action.meta.isUndo || action.meta.isRedo );\n\t\t\tif ( isCreateUndoLevel ) {\n\t\t\t\taction = lastEditAction;\n\t\t\t} else if ( ! isUndoOrRedo ) {\n\t\t\t\t// Don't lose the last edit cache if the new one only has transient edits.\n\t\t\t\t// Transient edits don't create new levels so updating the cache would make\n\t\t\t\t// us skip an edit later when creating levels explicitly.\n\t\t\t\tif (\n\t\t\t\t\tObject.keys( action.edits ).some(\n\t\t\t\t\t\t( key ) => ! action.transientEdits[ key ]\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tlastEditAction = action;\n\t\t\t\t} else {\n\t\t\t\t\tlastEditAction = {\n\t\t\t\t\t\t...action,\n\t\t\t\t\t\tedits: {\n\t\t\t\t\t\t\t...( lastEditAction && lastEditAction.edits ),\n\t\t\t\t\t\t\t...action.edits,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet nextState;\n\t\t\tif ( isUndoOrRedo ) {\n\t\t\t\tnextState = [ ...state ];\n\t\t\t\tnextState.offset =\n\t\t\t\t\tstate.offset + ( action.meta.isUndo ? -1 : 1 );\n\n\t\t\t\tif ( state.flattenedUndo ) {\n\t\t\t\t\t// The first undo in a sequence of undos might happen while we have\n\t\t\t\t\t// flattened undos in state. If this is the case, we want execution\n\t\t\t\t\t// to continue as if we were creating an explicit undo level. This\n\t\t\t\t\t// will result in an extra undo level being appended with the flattened\n\t\t\t\t\t// undo values.\n\t\t\t\t\t// We also have to take into account if the `lastEditAction` had opted out\n\t\t\t\t\t// of being tracked in undo history, like the action that persists the latest\n\t\t\t\t\t// content right before saving. In that case we have to update the `lastEditAction`\n\t\t\t\t\t// to avoid returning early before applying the existing flattened undos.\n\t\t\t\t\tisCreateUndoLevel = true;\n\t\t\t\t\tif ( ! lastEditAction.meta.undo ) {\n\t\t\t\t\t\tlastEditAction.meta.undo = {\n\t\t\t\t\t\t\tedits: {},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\taction = lastEditAction;\n\t\t\t\t} else {\n\t\t\t\t\treturn nextState;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! action.meta.undo ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// Transient edits don't create an undo level, but are\n\t\t\t// reachable in the next meaningful edit to which they\n\t\t\t// are merged. They are defined in the entity's config.\n\t\t\tif (\n\t\t\t\t! isCreateUndoLevel &&\n\t\t\t\t! Object.keys( action.edits ).some(\n\t\t\t\t\t( key ) => ! action.transientEdits[ key ]\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tnextState = [ ...state ];\n\t\t\t\tnextState.flattenedUndo = {\n\t\t\t\t\t...state.flattenedUndo,\n\t\t\t\t\t...action.edits,\n\t\t\t\t};\n\t\t\t\tnextState.offset = state.offset;\n\t\t\t\treturn nextState;\n\t\t\t}\n\n\t\t\t// Clear potential redos, because this only supports linear history.\n\t\t\tnextState =\n\t\t\t\tnextState || state.slice( 0, state.offset || undefined );\n\t\t\tnextState.offset = nextState.offset || 0;\n\t\t\tnextState.pop();\n\t\t\tif ( ! isCreateUndoLevel ) {\n\t\t\t\tnextState.push( {\n\t\t\t\t\tkind: action.meta.undo.kind,\n\t\t\t\t\tname: action.meta.undo.name,\n\t\t\t\t\trecordId: action.meta.undo.recordId,\n\t\t\t\t\tedits: {\n\t\t\t\t\t\t...state.flattenedUndo,\n\t\t\t\t\t\t...action.meta.undo.edits,\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t}\n\t\t\t// When an edit is a function it's an optimization to avoid running some expensive operation.\n\t\t\t// We can't rely on the function references being the same so we opt out of comparing them here.\n\t\t\tconst comparisonUndoEdits = Object.values(\n\t\t\t\taction.meta.undo.edits\n\t\t\t).filter( ( edit ) => typeof edit !== 'function' );\n\t\t\tconst comparisonEdits = Object.values( action.edits ).filter(\n\t\t\t\t( edit ) => typeof edit !== 'function'\n\t\t\t);\n\t\t\tif ( ! isShallowEqual( comparisonUndoEdits, comparisonEdits ) ) {\n\t\t\t\tnextState.push( {\n\t\t\t\t\tkind: action.kind,\n\t\t\t\t\tname: action.name,\n\t\t\t\t\trecordId: action.recordId,\n\t\t\t\t\tedits: isCreateUndoLevel\n\t\t\t\t\t\t? { ...state.flattenedUndo, ...action.edits }\n\t\t\t\t\t\t: action.edits,\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn nextState;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer managing embed preview data.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function embedPreviews( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_EMBED_PREVIEW':\n\t\t\tconst { url, preview } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ url ]: preview,\n\t\t\t};\n\t}\n\treturn state;\n}\n\n/**\n * State which tracks whether the user can perform an action on a REST\n * resource.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function userPermissions( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_USER_PERMISSION':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.key ]: action.isAllowed,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning autosaves keyed by their parent's post id.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function autosaves( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RECEIVE_AUTOSAVES':\n\t\t\tconst { postId, autosaves: autosavesData } = action;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ postId ]: autosavesData,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\nexport default combineReducers( {\n\tterms,\n\tusers,\n\tcurrentTheme,\n\tcurrentGlobalStylesId,\n\tcurrentUser,\n\tthemeGlobalStyleVariations,\n\tthemeBaseGlobalStyles,\n\ttaxonomies,\n\tentities,\n\tundo,\n\tembedPreviews,\n\tuserPermissions,\n\tautosaves,\n} );\n","'use strict';\n\nvar LEAF_KEY, hasWeakMap;\n\n/**\n * Arbitrary value used as key for referencing cache object in WeakMap tree.\n *\n * @type {Object}\n */\nLEAF_KEY = {};\n\n/**\n * Whether environment supports WeakMap.\n *\n * @type {boolean}\n */\nhasWeakMap = typeof WeakMap !== 'undefined';\n\n/**\n * Returns the first argument as the sole entry in an array.\n *\n * @param {*} value Value to return.\n *\n * @return {Array} Value returned as entry in array.\n */\nfunction arrayOf( value ) {\n\treturn [ value ];\n}\n\n/**\n * Returns true if the value passed is object-like, or false otherwise. A value\n * is object-like if it can support property assignment, e.g. object or array.\n *\n * @param {*} value Value to test.\n *\n * @return {boolean} Whether value is object-like.\n */\nfunction isObjectLike( value ) {\n\treturn !! value && 'object' === typeof value;\n}\n\n/**\n * Creates and returns a new cache object.\n *\n * @return {Object} Cache object.\n */\nfunction createCache() {\n\tvar cache = {\n\t\tclear: function() {\n\t\t\tcache.head = null;\n\t\t},\n\t};\n\n\treturn cache;\n}\n\n/**\n * Returns true if entries within the two arrays are strictly equal by\n * reference from a starting index.\n *\n * @param {Array}  a         First array.\n * @param {Array}  b         Second array.\n * @param {number} fromIndex Index from which to start comparison.\n *\n * @return {boolean} Whether arrays are shallowly equal.\n */\nfunction isShallowEqual( a, b, fromIndex ) {\n\tvar i;\n\n\tif ( a.length !== b.length ) {\n\t\treturn false;\n\t}\n\n\tfor ( i = fromIndex; i < a.length; i++ ) {\n\t\tif ( a[ i ] !== b[ i ] ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns a memoized selector function. The getDependants function argument is\n * called before the memoized selector and is expected to return an immutable\n * reference or array of references on which the selector depends for computing\n * its own return value. The memoize cache is preserved only as long as those\n * dependant references remain the same. If getDependants returns a different\n * reference(s), the cache is cleared and the selector value regenerated.\n *\n * @param {Function} selector      Selector function.\n * @param {Function} getDependants Dependant getter returning an immutable\n *                                 reference or array of reference used in\n *                                 cache bust consideration.\n *\n * @return {Function} Memoized selector.\n */\nexport default function( selector, getDependants ) {\n\tvar rootCache, getCache;\n\n\t// Use object source as dependant if getter not provided\n\tif ( ! getDependants ) {\n\t\tgetDependants = arrayOf;\n\t}\n\n\t/**\n\t * Returns the root cache. If WeakMap is supported, this is assigned to the\n\t * root WeakMap cache set, otherwise it is a shared instance of the default\n\t * cache object.\n\t *\n\t * @return {(WeakMap|Object)} Root cache object.\n\t */\n\tfunction getRootCache() {\n\t\treturn rootCache;\n\t}\n\n\t/**\n\t * Returns the cache for a given dependants array. When possible, a WeakMap\n\t * will be used to create a unique cache for each set of dependants. This\n\t * is feasible due to the nature of WeakMap in allowing garbage collection\n\t * to occur on entries where the key object is no longer referenced. Since\n\t * WeakMap requires the key to be an object, this is only possible when the\n\t * dependant is object-like. The root cache is created as a hierarchy where\n\t * each top-level key is the first entry in a dependants set, the value a\n\t * WeakMap where each key is the next dependant, and so on. This continues\n\t * so long as the dependants are object-like. If no dependants are object-\n\t * like, then the cache is shared across all invocations.\n\t *\n\t * @see isObjectLike\n\t *\n\t * @param {Array} dependants Selector dependants.\n\t *\n\t * @return {Object} Cache object.\n\t */\n\tfunction getWeakMapCache( dependants ) {\n\t\tvar caches = rootCache,\n\t\t\tisUniqueByDependants = true,\n\t\t\ti, dependant, map, cache;\n\n\t\tfor ( i = 0; i < dependants.length; i++ ) {\n\t\t\tdependant = dependants[ i ];\n\n\t\t\t// Can only compose WeakMap from object-like key.\n\t\t\tif ( ! isObjectLike( dependant ) ) {\n\t\t\t\tisUniqueByDependants = false;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Does current segment of cache already have a WeakMap?\n\t\t\tif ( caches.has( dependant ) ) {\n\t\t\t\t// Traverse into nested WeakMap.\n\t\t\t\tcaches = caches.get( dependant );\n\t\t\t} else {\n\t\t\t\t// Create, set, and traverse into a new one.\n\t\t\t\tmap = new WeakMap();\n\t\t\t\tcaches.set( dependant, map );\n\t\t\t\tcaches = map;\n\t\t\t}\n\t\t}\n\n\t\t// We use an arbitrary (but consistent) object as key for the last item\n\t\t// in the WeakMap to serve as our running cache.\n\t\tif ( ! caches.has( LEAF_KEY ) ) {\n\t\t\tcache = createCache();\n\t\t\tcache.isUniqueByDependants = isUniqueByDependants;\n\t\t\tcaches.set( LEAF_KEY, cache );\n\t\t}\n\n\t\treturn caches.get( LEAF_KEY );\n\t}\n\n\t// Assign cache handler by availability of WeakMap\n\tgetCache = hasWeakMap ? getWeakMapCache : getRootCache;\n\n\t/**\n\t * Resets root memoization cache.\n\t */\n\tfunction clear() {\n\t\trootCache = hasWeakMap ? new WeakMap() : createCache();\n\t}\n\n\t// eslint-disable-next-line jsdoc/check-param-names\n\t/**\n\t * The augmented selector call, considering first whether dependants have\n\t * changed before passing it to underlying memoize function.\n\t *\n\t * @param {Object} source    Source object for derivation.\n\t * @param {...*}   extraArgs Additional arguments to pass to selector.\n\t *\n\t * @return {*} Selector result.\n\t */\n\tfunction callSelector( /* source, ...extraArgs */ ) {\n\t\tvar len = arguments.length,\n\t\t\tcache, node, i, args, dependants;\n\n\t\t// Create copy of arguments (avoid leaking deoptimization).\n\t\targs = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tdependants = getDependants.apply( null, args );\n\t\tcache = getCache( dependants );\n\n\t\t// If not guaranteed uniqueness by dependants (primitive type or lack\n\t\t// of WeakMap support), shallow compare against last dependants and, if\n\t\t// references have changed, destroy cache to recalculate result.\n\t\tif ( ! cache.isUniqueByDependants ) {\n\t\t\tif ( cache.lastDependants && ! isShallowEqual( dependants, cache.lastDependants, 0 ) ) {\n\t\t\t\tcache.clear();\n\t\t\t}\n\n\t\t\tcache.lastDependants = dependants;\n\t\t}\n\n\t\tnode = cache.head;\n\t\twhile ( node ) {\n\t\t\t// Check whether node arguments match arguments\n\t\t\tif ( ! isShallowEqual( node.args, args, 1 ) ) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif ( node !== cache.head ) {\n\t\t\t\t// Adjust siblings to point to each other.\n\t\t\t\tnode.prev.next = node.next;\n\t\t\t\tif ( node.next ) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = cache.head;\n\t\t\t\tnode.prev = null;\n\t\t\t\tcache.head.prev = node;\n\t\t\t\tcache.head = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\tnode = {\n\t\t\t// Generate the result from original function\n\t\t\tval: selector.apply( null, args ),\n\t\t};\n\n\t\t// Avoid including the source object in the cache.\n\t\targs[ 0 ] = null;\n\t\tnode.args = args;\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif ( cache.head ) {\n\t\t\tcache.head.prev = node;\n\t\t\tnode.next = cache.head;\n\t\t}\n\n\t\tcache.head = node;\n\n\t\treturn node.val;\n\t}\n\n\tcallSelector.getDependants = getDependants;\n\tcallSelector.clear = clear;\n\tclear();\n\n\treturn callSelector;\n}\n","/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport EquivalentKeyMap from 'equivalent-key-map';\nimport { get, set } from 'lodash';\n\n/**\n * Internal dependencies\n */\nimport getQueryParts from './get-query-parts';\n\n/**\n * Cache of state keys to EquivalentKeyMap where the inner map tracks queries\n * to their resulting items set. WeakMap allows garbage collection on expired\n * state references.\n *\n * @type {WeakMap<Object,EquivalentKeyMap>}\n */\nconst queriedItemsCacheByState = new WeakMap();\n\n/**\n * Returns items for a given query, or null if the items are not known.\n *\n * @param {Object}  state State object.\n * @param {?Object} query Optional query.\n *\n * @return {?Array} Query items.\n */\nfunction getQueriedItemsUncached( state, query ) {\n\tconst {\n\t\tstableKey,\n\t\tpage,\n\t\tperPage,\n\t\tinclude,\n\t\tfields,\n\t\tcontext,\n\t} = getQueryParts( query );\n\tlet itemIds;\n\n\tif ( state.queries?.[ context ]?.[ stableKey ] ) {\n\t\titemIds = state.queries[ context ][ stableKey ];\n\t}\n\n\tif ( ! itemIds ) {\n\t\treturn null;\n\t}\n\n\tconst startOffset = perPage === -1 ? 0 : ( page - 1 ) * perPage;\n\tconst endOffset =\n\t\tperPage === -1\n\t\t\t? itemIds.length\n\t\t\t: Math.min( startOffset + perPage, itemIds.length );\n\n\tconst items = [];\n\tfor ( let i = startOffset; i < endOffset; i++ ) {\n\t\tconst itemId = itemIds[ i ];\n\t\tif ( Array.isArray( include ) && ! include.includes( itemId ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Having a target item ID doesn't guarantee that this object has been queried.\n\t\tif ( ! state.items[ context ]?.hasOwnProperty( itemId ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst item = state.items[ context ][ itemId ];\n\n\t\tlet filteredItem;\n\t\tif ( Array.isArray( fields ) ) {\n\t\t\tfilteredItem = {};\n\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tconst value = get( item, field );\n\t\t\t\tset( filteredItem, field, value );\n\t\t\t}\n\t\t} else {\n\t\t\t// If expecting a complete item, validate that completeness, or\n\t\t\t// otherwise abort.\n\t\t\tif ( ! state.itemIsComplete[ context ]?.[ itemId ] ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfilteredItem = item;\n\t\t}\n\n\t\titems.push( filteredItem );\n\t}\n\n\treturn items;\n}\n\n/**\n * Returns items for a given query, or null if the items are not known. Caches\n * result both per state (by reference) and per query (by deep equality).\n * The caching approach is intended to be durable to query objects which are\n * deeply but not referentially equal, since otherwise:\n *\n * `getQueriedItems( state, {} ) !== getQueriedItems( state, {} )`\n *\n * @param {Object}  state State object.\n * @param {?Object} query Optional query.\n *\n * @return {?Array} Query items.\n */\nexport const getQueriedItems = createSelector( ( state, query = {} ) => {\n\tlet queriedItemsCache = queriedItemsCacheByState.get( state );\n\tif ( queriedItemsCache ) {\n\t\tconst queriedItems = queriedItemsCache.get( query );\n\t\tif ( queriedItems !== undefined ) {\n\t\t\treturn queriedItems;\n\t\t}\n\t} else {\n\t\tqueriedItemsCache = new EquivalentKeyMap();\n\t\tqueriedItemsCacheByState.set( state, queriedItemsCache );\n\t}\n\n\tconst items = getQueriedItemsUncached( state, query );\n\tqueriedItemsCache.set( query, items );\n\treturn items;\n} );\n","/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { set, map, find, get, filter, compact } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getQueriedItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport { getNormalizedCommaSeparable, isRawAttribute } from './utils';\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param {Object} state Data state.\n * @param {string} url   URL the preview would be for.\n *\n * @return {boolean} Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select ) => ( state, url ) => {\n\t\treturn select( STORE_NAME ).isResolving( 'getEmbedPreview', [ url ] );\n\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @deprecated since 11.3. Callers should use `select( 'core' ).getUsers({ who: 'authors' })` instead.\n *\n * @param {Object}           state Data state.\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n * @return {Array} Authors list.\n */\nexport function getAuthors( state, query ) {\n\tdeprecated( \"select( 'core' ).getAuthors()\", {\n\t\tsince: '5.9',\n\t\talternative: \"select( 'core' ).getUsers({ who: 'authors' })\",\n\t} );\n\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\treturn getUserQueryResults( state, path );\n}\n\n/**\n * Returns the current user.\n *\n * @param {Object} state Data state.\n *\n * @return {Object} Current user object.\n */\nexport function getCurrentUser( state ) {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param {Object} state   Data state.\n * @param {string} queryID Query ID.\n *\n * @return {Array} Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state, queryID ) => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state, queryID ) => [ state.users.queries[ queryID ], state.users.byId ]\n);\n\n/**\n * Returns whether the entities for the give kind are loaded.\n *\n * @param {Object} state Data state.\n * @param {string} kind  Entity kind.\n *\n * @return {Array<Object>} Array of entities with config matching kind.\n */\nexport function getEntitiesByKind( state, kind ) {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity object given its kind and name.\n *\n * @param {Object} state Data state.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n *\n * @return {Object} Entity\n */\nexport function getEntity( state, kind, name ) {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {number}  key   Record's key\n * @param {?Object} query Optional query.\n *\n * @return {Object?} Record.\n */\nexport const getEntityRecord = createSelector(\n\t( state, kind, name, key, query ) => {\n\t\tconst queriedState = get( state.entities.data, [\n\t\t\tkind,\n\t\t\tname,\n\t\t\t'queriedData',\n\t\t] );\n\t\tif ( ! queriedState ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst context = query?.context ?? 'default';\n\n\t\tif ( query === undefined ) {\n\t\t\t// If expecting a complete item, validate that completeness.\n\t\t\tif ( ! queriedState.itemIsComplete[ context ]?.[ key ] ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn queriedState.items[ context ][ key ];\n\t\t}\n\n\t\tconst item = queriedState.items[ context ]?.[ key ];\n\t\tif ( item && query._fields ) {\n\t\t\tconst filteredItem = {};\n\t\t\tconst fields = getNormalizedCommaSeparable( query._fields );\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tconst value = get( item, field );\n\t\t\t\tset( filteredItem, field, value );\n\t\t\t}\n\t\t\treturn filteredItem;\n\t\t}\n\n\t\treturn item;\n\t},\n\t( state, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tget( state.entities.data, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.data, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity from the API if the entity record isn't available in the local state.\n *\n * @param {Object} state State tree\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n * @param {number} key   Record's key\n *\n * @return {Object|null} Record.\n */\nexport function __experimentalGetEntityRecordNoResolver(\n\tstate,\n\tkind,\n\tname,\n\tkey\n) {\n\treturn getEntityRecord( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param {Object} state State tree.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n * @param {number} key   Record's key.\n *\n * @return {Object?} Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t( state, kind, name, key ) => {\n\t\tconst record = getEntityRecord( state, kind, name, key );\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\tif ( isRawAttribute( getEntity( state, kind, name ), _key ) ) {\n\t\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\t\taccumulator[ _key ] = get(\n\t\t\t\t\t\trecord[ _key ],\n\t\t\t\t\t\t'raw',\n\t\t\t\t\t\trecord[ _key ]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[ _key ] = record[ _key ];\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {} )\n\t\t);\n\t},\n\t( state, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.data, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.data, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {?Object} query Optional terms query.\n *\n * @return {boolean} Whether entity records have been received.\n */\nexport function hasEntityRecords( state, kind, name, query ) {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {?Object} query Optional terms query.\n *\n * @return {?Array} Records.\n */\nexport function getEntityRecords( state, kind, name, query ) {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState = get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedItems( queriedState, query );\n}\n\n/**\n * Returns the  list of dirty entity records.\n *\n * @param {Object} state State tree.\n *\n * @return {[{ title: string, key: string, name: string, kind: string }]} The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tentities: { data },\n\t\t} = state;\n\t\tconst dirtyRecords = [];\n\t\tObject.keys( data ).forEach( ( kind ) => {\n\t\t\tObject.keys( data[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = Object.keys(\n\t\t\t\t\tdata[ kind ][ name ].edits\n\t\t\t\t).filter(\n\t\t\t\t\t( primaryKey ) =>\n\t\t\t\t\t\t// The entity record must exist (not be deleted),\n\t\t\t\t\t\t// and it must have edits.\n\t\t\t\t\t\tgetEntityRecord( state, kind, name, primaryKey ) &&\n\t\t\t\t\t\thasEditsForEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entity = getEntity( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey:\n\t\t\t\t\t\t\t\tentityRecord[\n\t\t\t\t\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttitle: entity?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns the list of entities currently being saved.\n *\n * @param {Object} state State tree.\n *\n * @return {[{ title: string, key: string, name: string, kind: string }]} The list of records being saved.\n */\nexport const __experimentalGetEntitiesBeingSaved = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tentities: { data },\n\t\t} = state;\n\t\tconst recordsBeingSaved = [];\n\t\tObject.keys( data ).forEach( ( kind ) => {\n\t\t\tObject.keys( data[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = Object.keys(\n\t\t\t\t\tdata[ kind ][ name ].saving\n\t\t\t\t).filter( ( primaryKey ) =>\n\t\t\t\t\tisSavingEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entity = getEntity( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\trecordsBeingSaved.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey:\n\t\t\t\t\t\t\t\tentityRecord[\n\t\t\t\t\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttitle: entity?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t\treturn recordsBeingSaved;\n\t},\n\t( state ) => [ state.entities.data ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's edits.\n */\nexport function getEntityRecordEdits( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [ kind, name, 'edits', recordId ] );\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t( state, kind, name, recordId ) => {\n\t\tconst { transientEdits } = getEntity( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state, kind, name, recordId ) => [\n\t\tstate.entities.config,\n\t\tget( state.entities.data, [ kind, name, 'edits', recordId ] ),\n\t]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord( state, kind, name, recordId ) {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t( state, kind, name, recordId ) => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t( state, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.data, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.data, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.data, [ kind, name, 'edits', recordId ] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord( state, kind, name, recordId ) {\n\tconst { pending, isAutosave } = get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'saving', recordId ],\n\t\t{}\n\t);\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord( state, kind, name, recordId ) {\n\treturn get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'saving', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord( state, kind, name, recordId ) {\n\treturn get(\n\t\tstate.entities.data,\n\t\t[ kind, name, 'deleting', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's save error.\n */\nexport function getLastEntitySaveError( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'saving',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's save error.\n */\nexport function getLastEntityDeleteError( state, kind, name, recordId ) {\n\treturn get( state.entities.data, [\n\t\tkind,\n\t\tname,\n\t\t'deleting',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param {Object} state State tree.\n *\n * @return {number} The current undo offset.\n */\nfunction getCurrentUndoOffset( state ) {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getUndoEdit( state ) {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getRedoEdit( state ) {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a previous edit or not.\n */\nexport function hasUndo( state ) {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a next edit or not.\n */\nexport function hasRedo( state ) {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return the current theme.\n *\n * @param {Object} state Data state.\n *\n * @return {Object} The current theme.\n */\nexport function getCurrentTheme( state ) {\n\treturn getEntityRecord( state, 'root', 'theme', state.currentTheme );\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param {Object} state Data state.\n *\n * @return {string} The current global styles ID.\n */\nexport function __experimentalGetCurrentGlobalStylesId( state ) {\n\treturn state.currentGlobalStylesId;\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param {Object} state Data state.\n *\n * @return {*} Index data.\n */\nexport function getThemeSupports( state ) {\n\treturn getCurrentTheme( state )?.theme_supports ?? EMPTY_OBJECT;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param {Object} state Data state.\n * @param {string} url   Embedded URL.\n *\n * @return {*} Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state, url ) {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param {Object} state Data state.\n * @param {string} url   Embedded URL.\n *\n * @return {boolean} Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state, url ) {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param {Object}  state    Data state.\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {string=} id       Optional ID of the rest resource to check.\n *\n * @return {boolean|undefined} Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser( state, action, resource, id ) {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n\n/**\n * Returns whether the current user can edit the given entity.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param {Object} state    Data state.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {string} recordId Record's id.\n * @return {boolean|undefined} Whether or not the user can edit,\n * or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUserEditEntityRecord( state, kind, name, recordId ) {\n\tconst entity = getEntity( state, kind, name );\n\tif ( ! entity ) {\n\t\treturn false;\n\t}\n\tconst resource = entity.__unstable_rest_base;\n\n\treturn canUser( state, 'update', resource, recordId );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {?Array} An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves( state, postType, postId ) {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n * @param {number} authorId The id of the author.\n *\n * @return {?Object} The autosave for the post and author.\n */\nexport function getAutosave( state, postType, postId, authorId ) {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\treturn find( autosaves, { author: authorId } );\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {boolean} True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) => ( state, postType, postId ) => {\n\t\treturn select( STORE_NAME ).hasFinishedResolution( 'getAutosaves', [\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t] );\n\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param {Object} state Editor state.\n *\n * @return {*} A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t() => [],\n\t( state ) => [\n\t\tstate.undo.length,\n\t\tstate.undo.offset,\n\t\tstate.undo.flattenedUndo,\n\t]\n);\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {Object} state Editor state.\n * @param {string} link  Link.\n *\n * @return {Object?} The template record.\n */\nexport function __experimentalGetTemplateForLink( state, link ) {\n\tconst records = getEntityRecords( state, 'postType', 'wp_template', {\n\t\t'find-template': link,\n\t} );\n\n\tconst template = records?.length ? records[ 0 ] : null;\n\tif ( template ) {\n\t\treturn getEditedEntityRecord(\n\t\t\tstate,\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\ttemplate.id\n\t\t);\n\t}\n\treturn template;\n}\n\n/**\n * Retrieve the current theme's base global styles\n *\n * @param {Object} state Editor state.\n *\n * @return {Object?} The Global Styles object.\n */\nexport function __experimentalGetCurrentThemeBaseGlobalStyles( state ) {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeBaseGlobalStyles[ currentTheme.stylesheet ];\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param {Object} state Data state.\n *\n * @return {string} The current global styles ID.\n */\nexport function __experimentalGetCurrentThemeGlobalStylesVariations( state ) {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeGlobalStyleVariations[ currentTheme.stylesheet ];\n}\n","/**\n * Checks whether the attribute is a \"raw\" attribute or not.\n *\n * @param {Object} entity    Entity data.\n * @param {string} attribute Attribute name.\n *\n * @return {boolean} Is the attribute raw\n */\nexport default function isRawAttribute( entity, attribute ) {\n\treturn ( entity.rawAttributes || [] ).includes( attribute );\n}\n","/**\n * Higher-order function which forward the resolution to another resolver with the same arguments.\n *\n * @param {string} resolverName forwarded resolver.\n *\n * @return {Function} Enhanced resolver.\n */\nconst forwardResolver = ( resolverName ) => ( ...args ) => async ( {\n\tresolveSelect,\n} ) => {\n\tawait resolveSelect[ resolverName ]( ...args );\n};\n\nexport default forwardResolver;\n","/**\n * External dependencies\n */\nimport { find, includes, get, compact, uniq } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getKindEntities, DEFAULT_ENTITY_KEY } from './entities';\nimport { forwardResolver, getNormalizedCommaSeparable } from './utils';\n\n/**\n * Requests authors from the REST API.\n *\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport const getAuthors = ( query ) => async ( { dispatch } ) => {\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\tconst users = await apiFetch( { path } );\n\tdispatch.receiveUserQuery( path, users );\n};\n\n/**\n * Requests the current user from the REST API.\n */\nexport const getCurrentUser = () => async ( { dispatch } ) => {\n\tconst currentUser = await apiFetch( { path: '/wp/v2/users/me' } );\n\tdispatch.receiveCurrentUser( currentUser );\n};\n\n/**\n * Requests an entity's record from the REST API.\n *\n * @param {string}           kind  Entity kind.\n * @param {string}           name  Entity name.\n * @param {number|string}    key   Record's key\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n */\nexport const getEntityRecord = ( kind, name, key = '', query ) => async ( {\n\tselect,\n\tdispatch,\n} ) => {\n\tconst entities = await dispatch( getKindEntities( kind ) );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity || entity?.__experimentalNoFetch ) {\n\t\treturn;\n\t}\n\n\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\tSTORE_NAME,\n\t\t[ 'entities', 'data', kind, name, key ],\n\t\t{ exclusive: false }\n\t);\n\n\ttry {\n\t\tif ( query !== undefined && query._fields ) {\n\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: uniq( [\n\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t] ).join(),\n\t\t\t};\n\t\t}\n\n\t\t// Disable reason: While true that an early return could leave `path`\n\t\t// unused, it's important that path is derived using the query prior to\n\t\t// additional query modifications in the condition below, since those\n\t\t// modifications are relevant to how the data is tracked in state, and not\n\t\t// for how the request is made to the REST API.\n\n\t\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\t\tconst path = addQueryArgs( entity.baseURL + ( key ? '/' + key : '' ), {\n\t\t\t...entity.baseURLParams,\n\t\t\t...query,\n\t\t} );\n\n\t\tif ( query !== undefined ) {\n\t\t\tquery = { ...query, include: [ key ] };\n\n\t\t\t// The resolution cache won't consider query as reusable based on the\n\t\t\t// fields, so it's tested here, prior to initiating the REST request,\n\t\t\t// and without causing `getEntityRecords` resolution to occur.\n\t\t\tconst hasRecords = select.hasEntityRecords( kind, name, query );\n\t\t\tif ( hasRecords ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst record = await apiFetch( { path } );\n\t\tdispatch.receiveEntityRecords( kind, name, record, query );\n\t} catch ( error ) {\n\t\t// We need a way to handle and access REST API errors in state\n\t\t// Until then, catching the error ensures the resolver is marked as resolved.\n\t\t// See similar implementation in `getEntityRecords()`.\n\t} finally {\n\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t}\n};\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getRawEntityRecord = forwardResolver( 'getEntityRecord' );\n\n/**\n * Requests an entity's record from the REST API.\n */\nexport const getEditedEntityRecord = forwardResolver( 'getEntityRecord' );\n\n/**\n * Requests the entity's records from the REST API.\n *\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {Object?} query Query Object.\n */\nexport const getEntityRecords = ( kind, name, query = {} ) => async ( {\n\tdispatch,\n} ) => {\n\tconst entities = await dispatch( getKindEntities( kind ) );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity || entity?.__experimentalNoFetch ) {\n\t\treturn;\n\t}\n\n\tconst lock = await dispatch.__unstableAcquireStoreLock(\n\t\tSTORE_NAME,\n\t\t[ 'entities', 'data', kind, name ],\n\t\t{ exclusive: false }\n\t);\n\n\ttry {\n\t\tif ( query._fields ) {\n\t\t\t// If requesting specific fields, items and query association to said\n\t\t\t// records are stored by ID reference. Thus, fields must always include\n\t\t\t// the ID.\n\t\t\tquery = {\n\t\t\t\t...query,\n\t\t\t\t_fields: uniq( [\n\t\t\t\t\t...( getNormalizedCommaSeparable( query._fields ) || [] ),\n\t\t\t\t\tentity.key || DEFAULT_ENTITY_KEY,\n\t\t\t\t] ).join(),\n\t\t\t};\n\t\t}\n\n\t\tconst path = addQueryArgs( entity.baseURL, {\n\t\t\t...entity.baseURLParams,\n\t\t\t...query,\n\t\t} );\n\n\t\tlet records = Object.values( await apiFetch( { path } ) );\n\t\t// If we request fields but the result doesn't contain the fields,\n\t\t// explicitely set these fields as \"undefined\"\n\t\t// that way we consider the query \"fullfilled\".\n\t\tif ( query._fields ) {\n\t\t\trecords = records.map( ( record ) => {\n\t\t\t\tquery._fields.split( ',' ).forEach( ( field ) => {\n\t\t\t\t\tif ( ! record.hasOwnProperty( field ) ) {\n\t\t\t\t\t\trecord[ field ] = undefined;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn record;\n\t\t\t} );\n\t\t}\n\n\t\tdispatch.receiveEntityRecords( kind, name, records, query );\n\n\t\t// When requesting all fields, the list of results can be used to\n\t\t// resolve the `getEntityRecord` selector in addition to `getEntityRecords`.\n\t\t// See https://github.com/WordPress/gutenberg/pull/26575\n\t\tif ( ! query?._fields && ! query.context ) {\n\t\t\tconst key = entity.key || DEFAULT_ENTITY_KEY;\n\t\t\tconst resolutionsArgs = records\n\t\t\t\t.filter( ( record ) => record[ key ] )\n\t\t\t\t.map( ( record ) => [ kind, name, record[ key ] ] );\n\n\t\t\tdispatch( {\n\t\t\t\ttype: 'START_RESOLUTIONS',\n\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\targs: resolutionsArgs,\n\t\t\t} );\n\t\t\tdispatch( {\n\t\t\t\ttype: 'FINISH_RESOLUTIONS',\n\t\t\t\tselectorName: 'getEntityRecord',\n\t\t\t\targs: resolutionsArgs,\n\t\t\t} );\n\t\t}\n\t} catch ( error ) {\n\t\t// We need a way to handle and access REST API errors in state\n\t\t// Until then, catching the error ensures the resolver is marked as resolved.\n\t\t// See similar implementation in `getEntityRecord()`.\n\t} finally {\n\t\tdispatch.__unstableReleaseStoreLock( lock );\n\t}\n};\n\ngetEntityRecords.shouldInvalidate = ( action, kind, name ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\tkind === action.kind &&\n\t\tname === action.name\n\t);\n};\n\n/**\n * Requests the current theme.\n */\nexport const getCurrentTheme = () => async ( { dispatch, resolveSelect } ) => {\n\tconst activeThemes = await resolveSelect.getEntityRecords(\n\t\t'root',\n\t\t'theme',\n\t\t{ status: 'active' }\n\t);\n\n\tdispatch.receiveCurrentTheme( activeThemes[ 0 ] );\n};\n\n/**\n * Requests theme supports data from the index.\n */\nexport const getThemeSupports = forwardResolver( 'getCurrentTheme' );\n\n/**\n * Requests a preview from the from the Embed API.\n *\n * @param {string} url URL to get the preview for.\n */\nexport const getEmbedPreview = ( url ) => async ( { dispatch } ) => {\n\ttry {\n\t\tconst embedProxyResponse = await apiFetch( {\n\t\t\tpath: addQueryArgs( '/oembed/1.0/proxy', { url } ),\n\t\t} );\n\t\tdispatch.receiveEmbedPreview( url, embedProxyResponse );\n\t} catch ( error ) {\n\t\t// Embed API 404s if the URL cannot be embedded, so we have to catch the error from the apiRequest here.\n\t\tdispatch.receiveEmbedPreview( url, false );\n\t}\n};\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update',\n *                           'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {?string} id       ID of the rest resource to check.\n */\nexport const canUser = ( action, resource, id ) => async ( { dispatch } ) => {\n\tconst methods = {\n\t\tcreate: 'POST',\n\t\tread: 'GET',\n\t\tupdate: 'PUT',\n\t\tdelete: 'DELETE',\n\t};\n\n\tconst method = methods[ action ];\n\tif ( ! method ) {\n\t\tthrow new Error( `'${ action }' is not a valid action.` );\n\t}\n\n\tconst path = id ? `/wp/v2/${ resource }/${ id }` : `/wp/v2/${ resource }`;\n\n\tlet response;\n\ttry {\n\t\tresponse = await apiFetch( {\n\t\t\tpath,\n\t\t\tmethod: 'OPTIONS',\n\t\t\tparse: false,\n\t\t} );\n\t} catch ( error ) {\n\t\t// Do nothing if our OPTIONS request comes back with an API error (4xx or\n\t\t// 5xx). The previously determined isAllowed value will remain in the store.\n\t\treturn;\n\t}\n\n\t// Optional chaining operator is used here because the API requests don't\n\t// return the expected result in the native version. Instead, API requests\n\t// only return the result, without including response properties like the headers.\n\tconst allowHeader = response.headers?.get( 'allow' );\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\tconst isAllowed = includes( allowHeader, method );\n\tdispatch.receiveUserPermission( key, isAllowed );\n};\n\n/**\n * Checks whether the current user can perform the given action on the given\n * REST resource.\n *\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {string} recordId Record's id.\n */\nexport const canUserEditEntityRecord = ( kind, name, recordId ) => async ( {\n\tdispatch,\n} ) => {\n\tconst entities = await dispatch( getKindEntities( kind ) );\n\tconst entity = find( entities, { kind, name } );\n\tif ( ! entity ) {\n\t\treturn;\n\t}\n\n\tconst resource = entity.__unstable_rest_base;\n\tawait dispatch( canUser( 'update', resource, recordId ) );\n};\n\n/**\n * Request autosave data from the REST API.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport const getAutosaves = ( postType, postId ) => async ( {\n\tdispatch,\n\tresolveSelect,\n} ) => {\n\tconst { rest_base: restBase } = await resolveSelect.getPostType( postType );\n\tconst autosaves = await apiFetch( {\n\t\tpath: `/wp/v2/${ restBase }/${ postId }/autosaves?context=edit`,\n\t} );\n\n\tif ( autosaves && autosaves.length ) {\n\t\tdispatch.receiveAutosaves( postId, autosaves );\n\t}\n};\n\n/**\n * Request autosave data from the REST API.\n *\n * This resolver exists to ensure the underlying autosaves are fetched via\n * `getAutosaves` when a call to the `getAutosave` selector is made.\n *\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n */\nexport const getAutosave = ( postType, postId ) => async ( {\n\tresolveSelect,\n} ) => {\n\tawait resolveSelect.getAutosaves( postType, postId );\n};\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {string} link Link.\n */\nexport const __experimentalGetTemplateForLink = ( link ) => async ( {\n\tdispatch,\n\tresolveSelect,\n} ) => {\n\t// Ideally this should be using an apiFetch call\n\t// We could potentially do so by adding a \"filter\" to the `wp_template` end point.\n\t// Also it seems the returned object is not a regular REST API post type.\n\tlet template;\n\ttry {\n\t\ttemplate = await window\n\t\t\t.fetch( addQueryArgs( link, { '_wp-find-template': true } ) )\n\t\t\t.then( ( res ) => res.json() )\n\t\t\t.then( ( { data } ) => data );\n\t} catch ( e ) {\n\t\t// For non-FSE themes, it is possible that this request returns an error.\n\t}\n\n\tif ( ! template ) {\n\t\treturn;\n\t}\n\n\tconst record = await resolveSelect.getEntityRecord(\n\t\t'postType',\n\t\t'wp_template',\n\t\ttemplate.id\n\t);\n\n\tif ( record ) {\n\t\tdispatch.receiveEntityRecords( 'postType', 'wp_template', [ record ], {\n\t\t\t'find-template': link,\n\t\t} );\n\t}\n};\n\n__experimentalGetTemplateForLink.shouldInvalidate = ( action ) => {\n\treturn (\n\t\t( action.type === 'RECEIVE_ITEMS' || action.type === 'REMOVE_ITEMS' ) &&\n\t\taction.invalidateCache &&\n\t\taction.kind === 'postType' &&\n\t\taction.name === 'wp_template'\n\t);\n};\n\nexport const __experimentalGetCurrentGlobalStylesId = () => async ( {\n\tdispatch,\n\tresolveSelect,\n} ) => {\n\tconst activeThemes = await resolveSelect.getEntityRecords(\n\t\t'root',\n\t\t'theme',\n\t\t{ status: 'active' }\n\t);\n\tconst globalStylesURL = get( activeThemes, [\n\t\t0,\n\t\t'_links',\n\t\t'wp:user-global-styles',\n\t\t0,\n\t\t'href',\n\t] );\n\tif ( globalStylesURL ) {\n\t\tconst globalStylesObject = await apiFetch( {\n\t\t\turl: globalStylesURL,\n\t\t} );\n\t\tdispatch.__experimentalReceiveCurrentGlobalStylesId(\n\t\t\tglobalStylesObject.id\n\t\t);\n\t}\n};\n\nexport const __experimentalGetCurrentThemeBaseGlobalStyles = () => async ( {\n\tresolveSelect,\n\tdispatch,\n} ) => {\n\tconst currentTheme = await resolveSelect.getCurrentTheme();\n\tconst themeGlobalStyles = await apiFetch( {\n\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }`,\n\t} );\n\tdispatch.__experimentalReceiveThemeBaseGlobalStyles(\n\t\tcurrentTheme.stylesheet,\n\t\tthemeGlobalStyles\n\t);\n};\n\nexport const __experimentalGetCurrentThemeGlobalStylesVariations = () => async ( {\n\tresolveSelect,\n\tdispatch,\n} ) => {\n\tconst currentTheme = await resolveSelect.getCurrentTheme();\n\tconst variations = await apiFetch( {\n\t\tpath: `/wp/v2/global-styles/themes/${ currentTheme.stylesheet }/variations`,\n\t} );\n\tdispatch.__experimentalReceiveThemeGlobalStyleVariations(\n\t\tcurrentTheme.stylesheet,\n\t\tvariations\n\t);\n};\n","export function deepCopyLocksTreePath( tree, path ) {\n\tconst newTree = { ...tree };\n\tlet currentNode = newTree;\n\tfor ( const branchName of path ) {\n\t\tcurrentNode.children = {\n\t\t\t...currentNode.children,\n\t\t\t[ branchName ]: {\n\t\t\t\tlocks: [],\n\t\t\t\tchildren: {},\n\t\t\t\t...currentNode.children[ branchName ],\n\t\t\t},\n\t\t};\n\t\tcurrentNode = currentNode.children[ branchName ];\n\t}\n\treturn newTree;\n}\n\nexport function getNode( tree, path ) {\n\tlet currentNode = tree;\n\tfor ( const branchName of path ) {\n\t\tconst nextNode = currentNode.children[ branchName ];\n\t\tif ( ! nextNode ) {\n\t\t\treturn null;\n\t\t}\n\t\tcurrentNode = nextNode;\n\t}\n\treturn currentNode;\n}\n\nexport function* iteratePath( tree, path ) {\n\tlet currentNode = tree;\n\tyield currentNode;\n\tfor ( const branchName of path ) {\n\t\tconst nextNode = currentNode.children[ branchName ];\n\t\tif ( ! nextNode ) {\n\t\t\tbreak;\n\t\t}\n\t\tyield nextNode;\n\t\tcurrentNode = nextNode;\n\t}\n}\n\nexport function* iterateDescendants( node ) {\n\tconst stack = Object.values( node.children );\n\twhile ( stack.length ) {\n\t\tconst childNode = stack.pop();\n\t\tyield childNode;\n\t\tstack.push( ...Object.values( childNode.children ) );\n\t}\n}\n\nexport function hasConflictingLock( { exclusive }, locks ) {\n\tif ( exclusive && locks.length ) {\n\t\treturn true;\n\t}\n\n\tif ( ! exclusive && locks.filter( ( lock ) => lock.exclusive ).length ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * Internal dependencies\n */\nimport { getNode, deepCopyLocksTreePath } from './utils';\n\nconst DEFAULT_STATE = {\n\trequests: [],\n\ttree: {\n\t\tlocks: [],\n\t\tchildren: {},\n\t},\n};\n\n/**\n * Reducer returning locks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport default function locks( state = DEFAULT_STATE, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENQUEUE_LOCK_REQUEST': {\n\t\t\tconst { request } = action;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trequests: [ request, ...state.requests ],\n\t\t\t};\n\t\t}\n\t\tcase 'GRANT_LOCK_REQUEST': {\n\t\t\tconst { lock, request } = action;\n\t\t\tconst { store, path } = request;\n\t\t\tconst storePath = [ store, ...path ];\n\n\t\t\tconst newTree = deepCopyLocksTreePath( state.tree, storePath );\n\t\t\tconst node = getNode( newTree, storePath );\n\t\t\tnode.locks = [ ...node.locks, lock ];\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trequests: state.requests.filter( ( r ) => r !== request ),\n\t\t\t\ttree: newTree,\n\t\t\t};\n\t\t}\n\t\tcase 'RELEASE_LOCK': {\n\t\t\tconst { lock } = action;\n\t\t\tconst storePath = [ lock.store, ...lock.path ];\n\n\t\t\tconst newTree = deepCopyLocksTreePath( state.tree, storePath );\n\t\t\tconst node = getNode( newTree, storePath );\n\t\t\tnode.locks = node.locks.filter( ( l ) => l !== lock );\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttree: newTree,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn state;\n}\n","/**\n * Internal dependencies\n */\nimport {\n\titerateDescendants,\n\titeratePath,\n\thasConflictingLock,\n\tgetNode,\n} from './utils';\n\nexport function getPendingLockRequests( state ) {\n\treturn state.requests;\n}\n\nexport function isLockAvailable( state, store, path, { exclusive } ) {\n\tconst storePath = [ store, ...path ];\n\tconst locks = state.tree;\n\n\t// Validate all parents and the node itself\n\tfor ( const node of iteratePath( locks, storePath ) ) {\n\t\tif ( hasConflictingLock( { exclusive }, node.locks ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// iteratePath terminates early if path is unreachable, let's\n\t// re-fetch the node and check it exists in the tree.\n\tconst node = getNode( locks, storePath );\n\tif ( ! node ) {\n\t\treturn true;\n\t}\n\n\t// Validate all nested nodes\n\tfor ( const descendant of iterateDescendants( node ) ) {\n\t\tif ( hasConflictingLock( { exclusive }, descendant.locks ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n","/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport { isLockAvailable, getPendingLockRequests } from './selectors';\n\nexport default function createLocks() {\n\tlet state = reducer( undefined, { type: '@@INIT' } );\n\n\tfunction processPendingLockRequests() {\n\t\tfor ( const request of getPendingLockRequests( state ) ) {\n\t\t\tconst { store, path, exclusive, notifyAcquired } = request;\n\t\t\tif ( isLockAvailable( state, store, path, { exclusive } ) ) {\n\t\t\t\tconst lock = { store, path, exclusive };\n\t\t\t\tstate = reducer( state, {\n\t\t\t\t\ttype: 'GRANT_LOCK_REQUEST',\n\t\t\t\t\tlock,\n\t\t\t\t\trequest,\n\t\t\t\t} );\n\t\t\t\tnotifyAcquired( lock );\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction acquire( store, path, exclusive ) {\n\t\treturn new Promise( ( resolve ) => {\n\t\t\tstate = reducer( state, {\n\t\t\t\ttype: 'ENQUEUE_LOCK_REQUEST',\n\t\t\t\trequest: { store, path, exclusive, notifyAcquired: resolve },\n\t\t\t} );\n\t\t\tprocessPendingLockRequests();\n\t\t} );\n\t}\n\tfunction release( lock ) {\n\t\tstate = reducer( state, {\n\t\t\ttype: 'RELEASE_LOCK',\n\t\t\tlock,\n\t\t} );\n\t\tprocessPendingLockRequests();\n\t}\n\n\treturn { acquire, release };\n}\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","/**\n * WordPress dependencies\n */\nimport {\n\tcreateContext,\n\tuseContext,\n\tuseCallback,\n\tuseEffect,\n} from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { parse, __unstableSerializeAndClean } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\n\nconst EMPTY_ARRAY = [];\n\n/**\n * Internal dependencies\n */\nimport { defaultEntities, kinds } from './entities';\n\nconst entities = {\n\t...defaultEntities.reduce( ( acc, entity ) => {\n\t\tif ( ! acc[ entity.kind ] ) {\n\t\t\tacc[ entity.kind ] = {};\n\t\t}\n\t\tacc[ entity.kind ][ entity.name ] = { context: createContext() };\n\t\treturn acc;\n\t}, {} ),\n\t...kinds.reduce( ( acc, kind ) => {\n\t\tacc[ kind.name ] = {};\n\t\treturn acc;\n\t}, {} ),\n};\nconst getEntity = ( kind, type ) => {\n\tif ( ! entities[ kind ] ) {\n\t\tthrow new Error( `Missing entity config for kind: ${ kind }.` );\n\t}\n\n\tif ( ! entities[ kind ][ type ] ) {\n\t\tentities[ kind ][ type ] = { context: createContext() };\n\t}\n\n\treturn entities[ kind ][ type ];\n};\n\n/**\n * Context provider component for providing\n * an entity for a specific entity type.\n *\n * @param {Object} props          The component's props.\n * @param {string} props.kind     The entity kind.\n * @param {string} props.type     The entity type.\n * @param {number} props.id       The entity ID.\n * @param {*}      props.children The children to wrap.\n *\n * @return {Object} The provided children, wrapped with\n *                   the entity's context provider.\n */\nexport default function EntityProvider( { kind, type, id, children } ) {\n\tconst Provider = getEntity( kind, type ).context.Provider;\n\treturn <Provider value={ id }>{ children }</Provider>;\n}\n\n/**\n * Hook that returns the ID for the nearest\n * provided entity of the specified type.\n *\n * @param {string} kind The entity kind.\n * @param {string} type The entity type.\n */\nexport function useEntityId( kind, type ) {\n\treturn useContext( getEntity( kind, type ).context );\n}\n\n/**\n * Hook that returns the value and a setter for the\n * specified property of the nearest provided\n * entity of the specified type.\n *\n * @param {string} kind  The entity kind.\n * @param {string} type  The entity type.\n * @param {string} prop  The property name.\n * @param {string} [_id] An entity ID to use instead of the context-provided one.\n *\n * @return {[*, Function, *]} An array where the first item is the\n *                            property value, the second is the\n *                            setter and the third is the full value\n * \t\t\t\t\t\t\t  object from REST API containing more\n * \t\t\t\t\t\t\t  information like `raw`, `rendered` and\n * \t\t\t\t\t\t\t  `protected` props.\n */\nexport function useEntityProp( kind, type, prop, _id ) {\n\tconst providerId = useEntityId( kind, type );\n\tconst id = _id ?? providerId;\n\n\tconst { value, fullValue } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getEntityRecord, getEditedEntityRecord } = select(\n\t\t\t\tSTORE_NAME\n\t\t\t);\n\t\t\tconst entity = getEntityRecord( kind, type, id ); // Trigger resolver.\n\t\t\tconst editedEntity = getEditedEntityRecord( kind, type, id );\n\t\t\treturn entity && editedEntity\n\t\t\t\t? {\n\t\t\t\t\t\tvalue: editedEntity[ prop ],\n\t\t\t\t\t\tfullValue: entity[ prop ],\n\t\t\t\t  }\n\t\t\t\t: {};\n\t\t},\n\t\t[ kind, type, id, prop ]\n\t);\n\tconst { editEntityRecord } = useDispatch( STORE_NAME );\n\tconst setValue = useCallback(\n\t\t( newValue ) => {\n\t\t\teditEntityRecord( kind, type, id, {\n\t\t\t\t[ prop ]: newValue,\n\t\t\t} );\n\t\t},\n\t\t[ kind, type, id, prop ]\n\t);\n\n\treturn [ value, setValue, fullValue ];\n}\n\n/**\n * Hook that returns block content getters and setters for\n * the nearest provided entity of the specified type.\n *\n * The return value has the shape `[ blocks, onInput, onChange ]`.\n * `onInput` is for block changes that don't create undo levels\n * or dirty the post, non-persistent changes, and `onChange` is for\n * peristent changes. They map directly to the props of a\n * `BlockEditorProvider` and are intended to be used with it,\n * or similar components or hooks.\n *\n * @param {string} kind         The entity kind.\n * @param {string} type         The entity type.\n * @param {Object} options\n * @param {string} [options.id] An entity ID to use instead of the context-provided one.\n *\n * @return {[WPBlock[], Function, Function]} The block array and setters.\n */\nexport function useEntityBlockEditor( kind, type, { id: _id } = {} ) {\n\tconst providerId = useEntityId( kind, type );\n\tconst id = _id ?? providerId;\n\tconst { content, blocks } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getEditedEntityRecord } = select( STORE_NAME );\n\t\t\tconst editedEntity = getEditedEntityRecord( kind, type, id );\n\t\t\treturn {\n\t\t\t\tblocks: editedEntity.blocks,\n\t\t\t\tcontent: editedEntity.content,\n\t\t\t};\n\t\t},\n\t\t[ kind, type, id ]\n\t);\n\tconst { __unstableCreateUndoLevel, editEntityRecord } = useDispatch(\n\t\tSTORE_NAME\n\t);\n\n\tuseEffect( () => {\n\t\t// Load the blocks from the content if not already in state\n\t\t// Guard against other instances that might have\n\t\t// set content to a function already or the blocks are already in state.\n\t\tif ( content && typeof content !== 'function' && ! blocks ) {\n\t\t\tconst parsedContent = parse( content );\n\t\t\teditEntityRecord(\n\t\t\t\tkind,\n\t\t\t\ttype,\n\t\t\t\tid,\n\t\t\t\t{\n\t\t\t\t\tblocks: parsedContent,\n\t\t\t\t},\n\t\t\t\t{ undoIgnore: true }\n\t\t\t);\n\t\t}\n\t}, [ content ] );\n\n\tconst onChange = useCallback(\n\t\t( newBlocks, options ) => {\n\t\t\tconst { selection } = options;\n\t\t\tconst edits = { blocks: newBlocks, selection };\n\n\t\t\tconst noChange = blocks === edits.blocks;\n\t\t\tif ( noChange ) {\n\t\t\t\treturn __unstableCreateUndoLevel( kind, type, id );\n\t\t\t}\n\n\t\t\t// We create a new function here on every persistent edit\n\t\t\t// to make sure the edit makes the post dirty and creates\n\t\t\t// a new undo level.\n\t\t\tedits.content = ( { blocks: blocksForSerialization = [] } ) =>\n\t\t\t\t__unstableSerializeAndClean( blocksForSerialization );\n\n\t\t\teditEntityRecord( kind, type, id, edits );\n\t\t},\n\t\t[ kind, type, id, blocks ]\n\t);\n\n\tconst onInput = useCallback(\n\t\t( newBlocks, options ) => {\n\t\t\tconst { selection } = options;\n\t\t\tconst edits = { blocks: newBlocks, selection };\n\t\t\teditEntityRecord( kind, type, id, edits );\n\t\t},\n\t\t[ kind, type, id ]\n\t);\n\n\treturn [ blocks ?? EMPTY_ARRAY, onInput, onChange ];\n}\n","/**\n * External dependencies\n */\nimport memoize from 'memize';\n\n// re-export due to restrictive esModuleInterop setting\nexport default memoize;\n","/* eslint-disable-next-line no-shadow */\nexport enum Status {\n\tIdle = 'IDLE',\n\tResolving = 'RESOLVING',\n\tError = 'ERROR',\n\tSuccess = 'SUCCESS',\n}\n","/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport memoize from './memoize';\nimport { Status } from './constants';\n\nexport const META_SELECTORS = [\n\t'getIsResolving',\n\t'hasStartedResolution',\n\t'hasFinishedResolution',\n\t'isResolving',\n\t'getCachedResolvers',\n];\n\ninterface QuerySelectResponse {\n\t/** the requested selector return value */\n\tdata: Object;\n\n\t/** is the record still being resolved? Via the `getIsResolving` meta-selector */\n\tisResolving: boolean;\n\n\t/** was the resolution started? Via the `hasStartedResolution` meta-selector */\n\thasStarted: boolean;\n\n\t/** has the resolution finished? Via the `hasFinishedResolution` meta-selector. */\n\thasResolved: boolean;\n}\n\n/**\n * Like useSelect, but the selectors return objects containing\n * both the original data AND the resolution info.\n *\n * @param {Function} mapQuerySelect see useSelect\n * @param {Array}    deps           see useSelect\n *\n * @example\n * ```js\n * import { useQuerySelect } from '@wordpress/data';\n * import { store as coreDataStore } from '@wordpress/core-data';\n *\n * function PageTitleDisplay( { id } ) {\n *   const { data: page, isResolving } = useQuerySelect( ( query ) => {\n *     return query( coreDataStore ).getEntityRecord( 'postType', 'page', id )\n *   }, [ id ] );\n *\n *   if ( isResolving ) {\n *     return 'Loading...';\n *   }\n *\n *   return page.title;\n * }\n *\n * // Rendered in the application:\n * // <PageTitleDisplay id={ 10 } />\n * ```\n *\n * In the above example, when `PageTitleDisplay` is rendered into an\n * application, the page and the resolution details will be retrieved from\n * the store state using the `mapSelect` callback on `useQuerySelect`.\n *\n * If the id prop changes then any page in the state for that id is\n * retrieved. If the id prop doesn't change and other props are passed in\n * that do change, the title will not change because the dependency is just\n * the id.\n * @see useSelect\n *\n * @return {QuerySelectResponse} Queried data.\n */\nexport default function __experimentalUseQuerySelect( mapQuerySelect, deps ) {\n\treturn useSelect( ( select, registry ) => {\n\t\tconst resolve = ( store ) => enrichSelectors( select( store ) );\n\t\treturn mapQuerySelect( resolve, registry );\n\t}, deps );\n}\n\ntype QuerySelector = ( ...args ) => QuerySelectResponse;\ninterface EnrichedSelectors {\n\t[ key: string ]: QuerySelector;\n}\n\n/**\n * Transform simple selectors into ones that return an object with the\n * original return value AND the resolution info.\n *\n * @param {Object} selectors Selectors to enrich\n * @return {EnrichedSelectors} Enriched selectors\n */\nconst enrichSelectors = memoize( ( selectors ) => {\n\tconst resolvers = {};\n\tfor ( const selectorName in selectors ) {\n\t\tif ( META_SELECTORS.includes( selectorName ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tObject.defineProperty( resolvers, selectorName, {\n\t\t\tget: () => ( ...args ) => {\n\t\t\t\tconst { getIsResolving, hasFinishedResolution } = selectors;\n\t\t\t\tconst isResolving = !! getIsResolving( selectorName, args );\n\t\t\t\tconst hasResolved =\n\t\t\t\t\t! isResolving &&\n\t\t\t\t\thasFinishedResolution( selectorName, args );\n\t\t\t\tconst data = selectors[ selectorName ]( ...args );\n\n\t\t\t\tlet status;\n\t\t\t\tif ( isResolving ) {\n\t\t\t\t\tstatus = Status.Resolving;\n\t\t\t\t} else if ( hasResolved ) {\n\t\t\t\t\tif ( data ) {\n\t\t\t\t\t\tstatus = Status.Success;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstatus = Status.Error;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstatus = Status.Idle;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdata,\n\t\t\t\t\tstatus,\n\t\t\t\t\tisResolving,\n\t\t\t\t\thasResolved,\n\t\t\t\t};\n\t\t\t},\n\t\t} );\n\t}\n\treturn resolvers;\n} );\n","/**\n * Internal dependencies\n */\nimport useQuerySelect from './use-query-select';\nimport { store as coreStore } from '../';\nimport { Status } from './constants';\n\ninterface EntityRecordResolution< RecordType > {\n\t/** The requested entity record */\n\trecord: RecordType | null;\n\n\t/**\n\t * Is the record still being resolved?\n\t */\n\tisResolving: boolean;\n\n\t/**\n\t * Is the record resolved by now?\n\t */\n\thasResolved: boolean;\n\n\t/** Resolution status */\n\tstatus: Status;\n}\n\n/**\n * Resolves the specified entity record.\n *\n * @param  kind     Kind of the requested entity.\n * @param  name     Name of the requested  entity.\n * @param  recordId Record ID of the requested entity.\n *\n * @example\n * ```js\n * import { useEntityRecord } from '@wordpress/core-data';\n *\n * function PageTitleDisplay( { id } ) {\n *   const { record, isResolving } = useEntityRecord( 'postType', 'page', id );\n *\n *   if ( isResolving ) {\n *     return 'Loading...';\n *   }\n *\n *   return record.title;\n * }\n *\n * // Rendered in the application:\n * // <PageTitleDisplay id={ 1 } />\n * ```\n *\n * In the above example, when `PageTitleDisplay` is rendered into an\n * application, the page and the resolution details will be retrieved from\n * the store state using `getEntityRecord()`, or resolved if missing.\n *\n * @return {EntityRecordResolution<RecordType>} Entity record data.\n * @template RecordType\n */\nexport default function __experimentalUseEntityRecord< RecordType >(\n\tkind: string,\n\tname: string,\n\trecordId: string | number\n): EntityRecordResolution< RecordType > {\n\tconst { data: record, ...rest } = useQuerySelect(\n\t\t( query ) => query( coreStore ).getEntityRecord( kind, name, recordId ),\n\t\t[ kind, name, recordId ]\n\t);\n\n\treturn {\n\t\trecord,\n\t\t...rest,\n\t};\n}\n","/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport useQuerySelect from './use-query-select';\nimport { store as coreStore } from '../';\nimport { Status } from './constants';\n\ninterface EntityRecordsResolution< RecordType > {\n\t/** The requested entity record */\n\trecords: RecordType[] | null;\n\n\t/**\n\t * Is the record still being resolved?\n\t */\n\tisResolving: boolean;\n\n\t/**\n\t * Is the record resolved by now?\n\t */\n\thasResolved: boolean;\n\n\t/** Resolution status */\n\tstatus: Status;\n}\n\n/**\n * Resolves the specified entity records.\n *\n * @param  kind      Kind of the requested entities.\n * @param  name      Name of the requested entities.\n * @param  queryArgs HTTP query for the requested entities.\n * @example\n * ```js\n * import { useEntityRecord } from '@wordpress/core-data';\n *\n * function PageTitlesList() {\n *   const { records, isResolving } = useEntityRecords( 'postType', 'page' );\n *\n *   if ( isResolving ) {\n *     return 'Loading...';\n *   }\n *\n *   return (\n *     <ul>\n *       {records.map(( page ) => (\n *         <li>{ page.title }</li>\n *       ))}\n *     </ul>\n *   );\n * }\n *\n * // Rendered in the application:\n * // <PageTitlesList />\n * ```\n *\n * In the above example, when `PageTitlesList` is rendered into an\n * application, the list of records and the resolution details will be retrieved from\n * the store state using `getEntityRecords()`, or resolved if missing.\n *\n * @return {EntityRecordsResolution<RecordType>} Entity records data.\n * @template RecordType\n */\nexport default function __experimentalUseEntityRecords< RecordType >(\n\tkind: string,\n\tname: string,\n\tqueryArgs: unknown = {}\n): EntityRecordsResolution< RecordType > {\n\t// Serialize queryArgs to a string that can be safely used as a React dep.\n\t// We can't just pass queryArgs as one of the deps, because if it is passed\n\t// as an object literal, then it will be a different object on each call even\n\t// if the values remain the same.\n\tconst queryAsString = addQueryArgs( '', queryArgs );\n\n\tconst { data: records, ...rest } = useQuerySelect(\n\t\t( query ) =>\n\t\t\tquery( coreStore ).getEntityRecords( kind, name, queryArgs ),\n\t\t[ kind, name, queryAsString ]\n\t);\n\n\treturn {\n\t\trecords,\n\t\t...rest,\n\t};\n}\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"htmlEntities\"];","/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Filters the search by type\n *\n * @typedef { 'post' | 'term' | 'post-format' } WPLinkSearchType\n */\n\n/**\n * A link with an id may be of kind post-type or taxonomy\n *\n * @typedef { 'post-type' | 'taxonomy' } WPKind\n */\n\n/**\n * @typedef WPLinkSearchOptions\n *\n * @property {boolean}          [isInitialSuggestions] Displays initial search suggestions, when true.\n * @property {WPLinkSearchType} [type]                 Filters by search type.\n * @property {string}           [subtype]              Slug of the post-type or taxonomy.\n * @property {number}           [page]                 Which page of results to return.\n * @property {number}           [perPage]              Search results per page.\n */\n\n/**\n * @typedef WPLinkSearchResult\n *\n * @property {number} id     Post or term id.\n * @property {string} url    Link url.\n * @property {string} title  Title of the link.\n * @property {string} type   The taxonomy or post type slug or type URL.\n * @property {WPKind} [kind] Link kind of post-type or taxonomy\n */\n\n/**\n * @typedef WPEditorSettings\n *\n * @property {boolean} [ disablePostFormats ] Disables post formats, when true.\n */\n\n/**\n * Fetches link suggestions from the API.\n *\n * @async\n * @param {string}              search\n * @param {WPLinkSearchOptions} [searchOptions]\n * @param {WPEditorSettings}    [settings]\n *\n * @example\n * ```js\n * import { __experimentalFetchLinkSuggestions as fetchLinkSuggestions } from '@wordpress/core-data';\n *\n * //...\n *\n * export function initialize( id, settings ) {\n *\n * settings.__experimentalFetchLinkSuggestions = (\n *     search,\n *     searchOptions\n * ) => fetchLinkSuggestions( search, searchOptions, settings );\n * ```\n * @return {Promise< WPLinkSearchResult[] >} List of search suggestions\n */\nconst fetchLinkSuggestions = async (\n\tsearch,\n\tsearchOptions = {},\n\tsettings = {}\n) => {\n\tconst {\n\t\tisInitialSuggestions = false,\n\t\ttype = undefined,\n\t\tsubtype = undefined,\n\t\tpage = undefined,\n\t\tperPage = isInitialSuggestions ? 3 : 20,\n\t} = searchOptions;\n\n\tconst { disablePostFormats = false } = settings;\n\n\tconst queries = [];\n\n\tif ( ! type || type === 'post' ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t\ttype: 'post',\n\t\t\t\t\tsubtype,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'post-type', subtype },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] ) // Fail by returning no results.\n\t\t);\n\t}\n\n\tif ( ! type || type === 'term' ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t\ttype: 'term',\n\t\t\t\t\tsubtype,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'taxonomy', subtype },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] )\n\t\t);\n\t}\n\n\tif ( ! disablePostFormats && ( ! type || type === 'post-format' ) ) {\n\t\tqueries.push(\n\t\t\tapiFetch( {\n\t\t\t\tpath: addQueryArgs( '/wp/v2/search', {\n\t\t\t\t\tsearch,\n\t\t\t\t\tpage,\n\t\t\t\t\tper_page: perPage,\n\t\t\t\t\ttype: 'post-format',\n\t\t\t\t\tsubtype,\n\t\t\t\t} ),\n\t\t\t} )\n\t\t\t\t.then( ( results ) => {\n\t\t\t\t\treturn results.map( ( result ) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\tmeta: { kind: 'taxonomy', subtype },\n\t\t\t\t\t\t};\n\t\t\t\t\t} );\n\t\t\t\t} )\n\t\t\t\t.catch( () => [] )\n\t\t);\n\t}\n\n\treturn Promise.all( queries ).then( ( results ) => {\n\t\treturn results\n\t\t\t.reduce(\n\t\t\t\t( accumulator, current ) => accumulator.concat( current ), // Flatten list.\n\t\t\t\t[]\n\t\t\t)\n\t\t\t.filter(\n\t\t\t\t/**\n\t\t\t\t * @param {{ id: number }} result\n\t\t\t\t */\n\t\t\t\t( result ) => {\n\t\t\t\t\treturn !! result.id;\n\t\t\t\t}\n\t\t\t)\n\t\t\t.slice( 0, perPage )\n\t\t\t.map(\n\t\t\t\t/**\n\t\t\t\t * @param {{ id: number, url:string, title?:string, subtype?: string, type?: string }} result\n\t\t\t\t */\n\t\t\t\t( result ) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: result.id,\n\t\t\t\t\t\turl: result.url,\n\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\tdecodeEntities( result.title || '' ) ||\n\t\t\t\t\t\t\t__( '(no title)' ),\n\t\t\t\t\t\ttype: result.subtype || result.type,\n\t\t\t\t\t\tkind: result?.meta?.kind,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t);\n\t} );\n};\n\nexport default fetchLinkSuggestions;\n","/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\nimport {\n\taddQueryArgs,\n\tprependHTTP,\n\tisURL,\n\tgetProtocol,\n\tisValidProtocol,\n} from '@wordpress/url';\n\n/**\n * A simple in-memory cache for requests.\n * This avoids repeat HTTP requests which may be beneficial\n * for those wishing to preserve low-bandwidth.\n */\nconst CACHE = new Map();\n\n/**\n * @typedef WPRemoteUrlData\n *\n * @property {string} title contents of the remote URL's `<title>` tag.\n */\n\n/**\n * Fetches data about a remote URL.\n * eg: <title> tag, favicon...etc.\n *\n * @async\n * @param {string}  url     the URL to request details from.\n * @param {Object?} options any options to pass to the underlying fetch.\n * @example\n * ```js\n * import { __experimentalFetchUrlData as fetchUrlData } from '@wordpress/core-data';\n *\n * //...\n *\n * export function initialize( id, settings ) {\n *\n * settings.__experimentalFetchUrlData = (\n * url\n * ) => fetchUrlData( url );\n * ```\n * @return {Promise< WPRemoteUrlData[] >} Remote URL data.\n */\nconst fetchUrlData = async ( url, options = {} ) => {\n\tconst endpoint = '/wp-block-editor/v1/url-details';\n\n\tconst args = {\n\t\turl: prependHTTP( url ),\n\t};\n\n\tif ( ! isURL( url ) ) {\n\t\treturn Promise.reject( `${ url } is not a valid URL.` );\n\t}\n\n\t// Test for \"http\" based URL as it is possible for valid\n\t// yet unusable URLs such as `tel:123456` to be passed.\n\tconst protocol = getProtocol( url );\n\n\tif (\n\t\t! isValidProtocol( protocol ) ||\n\t\t! protocol.startsWith( 'http' ) ||\n\t\t! /^https?:\\/\\/[^\\/\\s]/i.test( url )\n\t) {\n\t\treturn Promise.reject(\n\t\t\t`${ url } does not have a valid protocol. URLs must be \"http\" based`\n\t\t);\n\t}\n\n\tif ( CACHE.has( url ) ) {\n\t\treturn CACHE.get( url );\n\t}\n\n\treturn apiFetch( {\n\t\tpath: addQueryArgs( endpoint, args ),\n\t\t...options,\n\t} ).then( ( res ) => {\n\t\tCACHE.set( url, res );\n\t\treturn res;\n\t} );\n};\n\nexport default fetchUrlData;\n","/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as selectors from './selectors';\nimport * as actions from './actions';\nimport * as resolvers from './resolvers';\nimport createLocksActions from './locks/actions';\nimport { defaultEntities, getMethodName } from './entities';\nimport { STORE_NAME } from './name';\n\n// The entity selectors/resolvers and actions are shortcuts to their generic equivalents\n// (getEntityRecord, getEntityRecords, updateEntityRecord, updateEntityRecordss)\n// Instead of getEntityRecord, the consumer could use more user-frieldly named selector: getPostType, getTaxonomy...\n// The \"kind\" and the \"name\" of the entity are combined to generate these shortcuts.\n\nconst entitySelectors = defaultEntities.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name ) ] = ( state, key, query ) =>\n\t\tselectors.getEntityRecord( state, kind, name, key, query );\n\tresult[ getMethodName( kind, name, 'get', true ) ] = ( state, ...args ) =>\n\t\tselectors.getEntityRecords( state, kind, name, ...args );\n\treturn result;\n}, {} );\n\nconst entityResolvers = defaultEntities.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name ) ] = ( key, query ) =>\n\t\tresolvers.getEntityRecord( kind, name, key, query );\n\tconst pluralMethodName = getMethodName( kind, name, 'get', true );\n\tresult[ pluralMethodName ] = ( ...args ) =>\n\t\tresolvers.getEntityRecords( kind, name, ...args );\n\tresult[ pluralMethodName ].shouldInvalidate = ( action, ...args ) =>\n\t\tresolvers.getEntityRecords.shouldInvalidate(\n\t\t\taction,\n\t\t\tkind,\n\t\t\tname,\n\t\t\t...args\n\t\t);\n\treturn result;\n}, {} );\n\nconst entityActions = defaultEntities.reduce( ( result, entity ) => {\n\tconst { kind, name } = entity;\n\tresult[ getMethodName( kind, name, 'save' ) ] = ( key ) =>\n\t\tactions.saveEntityRecord( kind, name, key );\n\tresult[ getMethodName( kind, name, 'delete' ) ] = ( key, query ) =>\n\t\tactions.deleteEntityRecord( kind, name, key, query );\n\treturn result;\n}, {} );\n\nconst storeConfig = () => ( {\n\treducer,\n\tactions: { ...actions, ...entityActions, ...createLocksActions() },\n\tselectors: { ...selectors, ...entitySelectors },\n\tresolvers: { ...resolvers, ...entityResolvers },\n} );\n\n/**\n * Store definition for the code data namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, storeConfig() );\n\nregister( store );\n\nexport { default as EntityProvider } from './entity-provider';\nexport { default as __experimentalUseEntityRecord } from './hooks/use-entity-record';\nexport { default as __experimentalUseEntityRecords } from './hooks/use-entity-records';\nexport * from './entity-provider';\nexport * from './fetch';\nexport * from './entity-types';\n","/**\n * Internal dependencies\n */\nimport createLocks from './engine';\n\nexport default function createLocksActions() {\n\tconst locks = createLocks();\n\n\tfunction __unstableAcquireStoreLock( store, path, { exclusive } ) {\n\t\treturn () => locks.acquire( store, path, exclusive );\n\t}\n\n\tfunction __unstableReleaseStoreLock( lock ) {\n\t\treturn () => locks.release( lock );\n\t}\n\n\treturn { __unstableAcquireStoreLock, __unstableReleaseStoreLock };\n}\n"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","getValuePair","instance","_map","_arrayTreeMap","_objectTreeMap","has","get","properties","keys","sort","map","Array","isArray","property","undefined","propertyValue","valuePair","delete","set","EquivalentKeyMap","iterable","Constructor","TypeError","_classCallCheck","this","clear","iterablePairs","forEach","value","push","protoProps","previousValuePair","callback","_this","thisArg","arguments","call","Map","size","module","exports","fn","options","head","tail","memoized","args","node","len","searchCache","next","prev","val","apply","maxSize","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","o","prop","hasOwnProperty","r","toStringTag","window","isMatch","reducer","state","action","replacer","conservativeMapItem","item","nextItem","hasChanges","result","isEqual","actionProperty","nextKeyState","getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","rng","Error","uuid","byteToHex","toString","substr","buf","offset","rnds","random","arr","toLowerCase","receiveItems","items","edits","type","castArray","persistedEdits","removeItems","kind","name","records","invalidateCache","itemIds","receiveQueriedItems","query","maxItems","async","defaultProcessor","requests","preflightResponse","apiFetch","path","method","endpoints","results","batchRequests","chunk","batchResponse","data","validation","request","body","headers","batchResults","failed","responses","response","error","status","output","ObservableSet","Set","subscribers","add","subscriber","isSuccess","subscribe","STORE_NAME","receiveUserQuery","queryID","users","receiveCurrentUser","currentUser","addEntities","entities","receiveEntityRecords","record","title","receiveCurrentTheme","currentTheme","__experimentalReceiveCurrentGlobalStylesId","currentGlobalStylesId","id","__experimentalReceiveThemeBaseGlobalStyles","stylesheet","globalStyles","__experimentalReceiveThemeGlobalStyleVariations","variations","receiveThemeSupports","deprecated","since","receiveEmbedPreview","url","preview","deleteEntityRecord","recordId","__unstableFetch","dispatch","getKindEntities","entity","find","deletedRecord","__experimentalNoFetch","lock","__unstableAcquireStoreLock","exclusive","baseURL","addQueryArgs","_error","__unstableReleaseStoreLock","editEntityRecord","select","getEntity","transientEdits","mergedEdits","getRawEntityRecord","editedRecord","getEditedEntityRecord","edit","reduce","acc","recordValue","editedRecordValue","meta","undo","undoIgnore","undoEdit","getUndoEdit","isUndo","redo","redoEdit","getRedoEdit","isRedo","__unstableCreateUndoLevel","saveEntityRecord","isAutosave","resolveSelect","entityIdKey","DEFAULT_ENTITY_KEY","entries","evaluatedValue","updatedRecord","persistedRecord","getCurrentUser","currentUserId","autosavePost","getAutosave","includes","newRecord","receiveAutosaves","__unstablePrePersist","__experimentalBatch","batch","processor","lastId","queue","pending","inputOrThunk","input","Promise","resolve","reject","isFunction","finally","unsubscribe","pair","zip","queueItem","createBatch","api","saveEditedEntityRecord","resultPromises","all","run","hasEditsForEntityRecord","getEntityRecordNonTransientEdits","__experimentalSaveSpecifiedEntityEdits","itemsToSave","editsToSave","some","receiveUploadPermissions","hasUploadPermissions","alternative","receiveUserPermission","isAllowed","postId","autosaves","POST_RAW_ATTRIBUTES","defaultEntities","label","__","getTitle","baseURLParams","context","rawAttributes","plural","blocks","description","rendered","kinds","loadEntities","postTypes","postType","isTemplate","rest_namespace","rest_base","selection","startCase","slug","String","prePersistPostType","__unstable_rest_base","taxonomies","taxonomy","newEdits","getMethodName","prefix","usePlural","kindPrefix","upperFirst","camelCase","nameSuffix","suffix","getEntitiesByKind","kindConfig","split","cache","WeakMap","parts","stableKey","page","perPage","fields","include","Number","getNormalizedCommaSeparable","join","slice","isObjectLike","getContextFromAction","getQueryParts","getMergedItemIds","nextItemIds","nextItemIdsStartIndex","Math","max","mergedItemIds","isInNextItemsRange","receiveQueries","flowRight","ifMatchingAction","replaceAction","onSubKey","combineReducers","accumulator","itemId","mapValues","contextState","omit","itemIsComplete","queryParts","isCompleteQuery","queries","removedItems","contextQueries","queryItems","filter","queryId","entityConfig","queriedData","queriedDataReducer","nextState","nextEdits","saving","deleting","entitiesConfig","UNDO_INITIAL_STATE","lastEditAction","LEAF_KEY","hasWeakMap","terms","byId","keyBy","user","themeGlobalStyleVariations","themeBaseGlobalStyles","newConfig","config","entitiesDataReducer","entitiesByKind","groupBy","memo","subEntities","kindReducer","kindMemo","newData","isCreateUndoLevel","isUndoOrRedo","flattenedUndo","pop","comparisonUndoEdits","values","comparisonEdits","isShallowEqual","embedPreviews","userPermissions","autosavesData","arrayOf","createCache","b","fromIndex","selector","getDependants","rootCache","getCache","callSelector","dependants","isUniqueByDependants","lastDependants","dependant","caches","queriedItemsCacheByState","getQueriedItemsUncached","startOffset","endOffset","min","filteredItem","f","field","getQueriedItems","createSelector","queriedItemsCache","queriedItems","EMPTY_OBJECT","isRequestingEmbedPreview","createRegistrySelector","isResolving","getAuthors","getUserQueryResults","queryResults","getEntityRecord","queriedState","_fields","__experimentalGetEntityRecordNoResolver","_key","attribute","isRawAttribute","hasEntityRecords","getEntityRecords","__experimentalGetDirtyEntityRecords","dirtyRecords","primaryKeys","primaryKey","entityRecord","__experimentalGetEntitiesBeingSaved","recordsBeingSaved","isSavingEntityRecord","getEntityRecordEdits","isAutosavingEntityRecord","Boolean","isDeletingEntityRecord","getLastEntitySaveError","getLastEntityDeleteError","getCurrentUndoOffset","hasUndo","hasRedo","getCurrentTheme","__experimentalGetCurrentGlobalStylesId","getThemeSupports","theme_supports","getEmbedPreview","isPreviewEmbedFallback","oEmbedLinkCheck","html","canUser","resource","compact","canUserEditEntityRecord","getAutosaves","authorId","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","__experimentalGetTemplateForLink","link","template","__experimentalGetCurrentThemeBaseGlobalStyles","__experimentalGetCurrentThemeGlobalStylesVariations","resolverName","uniq","forwardResolver","resolutionsArgs","selectorName","shouldInvalidate","activeThemes","embedProxyResponse","create","read","update","parse","allowHeader","restBase","getPostType","fetch","then","res","json","e","globalStylesURL","globalStylesObject","themeGlobalStyles","deepCopyLocksTreePath","tree","newTree","currentNode","branchName","children","locks","getNode","nextNode","hasConflictingLock","DEFAULT_STATE","store","storePath","l","isLockAvailable","iteratePath","descendant","stack","childNode","iterateDescendants","createLocks","processPendingLockRequests","getPendingLockRequests","notifyAcquired","acquire","release","EMPTY_ARRAY","createContext","EntityProvider","Provider","useEntityId","useContext","useEntityProp","_id","providerId","fullValue","useSelect","editedEntity","useDispatch","useCallback","newValue","useEntityBlockEditor","content","useEffect","parsedContent","onChange","newBlocks","blocksForSerialization","__unstableSerializeAndClean","onInput","Status","META_SELECTORS","__experimentalUseQuerySelect","mapQuerySelect","deps","registry","enrichSelectors","memoize","selectors","resolvers","getIsResolving","hasResolved","Resolving","Success","Idle","__experimentalUseEntityRecord","rest","useQuerySelect","coreStore","__experimentalUseEntityRecords","queryArgs","queryAsString","search","searchOptions","settings","isInitialSuggestions","subtype","disablePostFormats","per_page","catch","current","concat","decodeEntities","CACHE","endpoint","prependHTTP","isURL","protocol","getProtocol","isValidProtocol","startsWith","test","entitySelectors","entityResolvers","pluralMethodName","entityActions","actions","createReduxStore","createLocksActions","register"],"sourceRoot":""}